{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"VortexaSDK Welcome to Vortexa's Python Software Development Kit (SDK)! We built the SDK to provide fast, interactive, programmatic exploration of our data. The tool lets Data Scientists, Analysts and Developers efficiently explore the world\u2019s waterborne oil movements, and to build custom models & reports with minimum setup cost. The SDK sits as a thin python wrapper around Vortexa's API , giving you immediate access to pandas DataFrames. Quick Start Installation The SDK requires Python version 3.7 or above. $ pip install vortexasdk See the Setup FAQ page for more details Authentication Set your VORTEXA_API_KEY environment variable, that's all. To experiment with Vortexa's data, you can request a demo here . Check the Setup FAQ page for more details. Check everything is setup correctly Run the following in a terminal: $ python -m vortexasdk check-setup Example In an interactive python console, run: >>> from datetime import datetime >>> from vortexasdk import CargoMovements >>> df = CargoMovements()\\ .search(filter_activity='loading_state', filter_time_min=datetime(2017, 8, 1, 23), filter_time_max=datetime(2017, 8, 1, 23))\\ .to_df() returns quantity vessels.0.name product.group.label product.grade.label events.cargo_port_load_event.0.end_timestamp events.cargo_port_unload_event.0.start_timestamp 0 1998 ALSIA SWAN Clean products Lube Oils 2017-08-01T06:10:45+0000 2017-08-27T14:38:15+0000 1 16559 IVER AMBITION Dirty products nan 2017-08-02T17:20:51+0000 2017-09-07T07:52:20+0000 2 522288 BLUE SUN Crude Gharib 2017-08-02T04:22:09+0000 2017-08-13T10:32:09+0000 3 46260 XINWANYU16 Clean products Chemicals 2017-08-01T01:07:40+0000 2017-08-10T06:21:43+0000 Alternatively, you can copy the contents of example_load_cargo_movements.py into a file named example.py and run python example.py from your terminal or powershell console. Next Steps Learn how to call Endpoints Glossary The Glossary can be found at Vortexa API Documentation . The Glossary outlines key terms, functions and assumptions aimed at helping to extract powerful findings from our data. Documentation Read the documentation at VortexaSDK Docs Contributing We welcome contributions! Please read our Contributing Guide for ways to offer feedback and contributions. Thanks goes to these wonderful contributors ( emoji key ): Kit Burgess \ud83c\udfa8 \ud83d\udcbb tinovs \ud83d\udcbb \ud83d\udc40 David Andrew Starkey \ud83d\udcbb \ud83d\udcd6 \ud83d\udca1 syed \ud83d\udc40 Jakub Korzeniowski \ud83e\udd14 Edward Wright \ud83d\udcd3 Patrick Roddy \ud83d\udcd3 Romain \ud83d\udcd3 \ud83e\udd14 Natday \ud83d\udcbc \ud83e\udd14 \ud83d\udcd3 ArthurD1 \ud83d\udcd3 Chloe Connor \ud83d\udcd3 Achilleas Sfakianakis \ud83d\udcd3 This project follows the all-contributors specification. Contributions of any kind welcome!","title":"Home"},{"location":"#vortexasdk","text":"Welcome to Vortexa's Python Software Development Kit (SDK)! We built the SDK to provide fast, interactive, programmatic exploration of our data. The tool lets Data Scientists, Analysts and Developers efficiently explore the world\u2019s waterborne oil movements, and to build custom models & reports with minimum setup cost. The SDK sits as a thin python wrapper around Vortexa's API , giving you immediate access to pandas DataFrames.","title":"VortexaSDK"},{"location":"#quick-start","text":"","title":"Quick Start"},{"location":"#installation","text":"The SDK requires Python version 3.7 or above. $ pip install vortexasdk See the Setup FAQ page for more details","title":"Installation"},{"location":"#authentication","text":"Set your VORTEXA_API_KEY environment variable, that's all. To experiment with Vortexa's data, you can request a demo here . Check the Setup FAQ page for more details.","title":"Authentication"},{"location":"#check-everything-is-setup-correctly","text":"Run the following in a terminal: $ python -m vortexasdk check-setup","title":"Check everything is setup correctly"},{"location":"#example","text":"In an interactive python console, run: >>> from datetime import datetime >>> from vortexasdk import CargoMovements >>> df = CargoMovements()\\ .search(filter_activity='loading_state', filter_time_min=datetime(2017, 8, 1, 23), filter_time_max=datetime(2017, 8, 1, 23))\\ .to_df() returns quantity vessels.0.name product.group.label product.grade.label events.cargo_port_load_event.0.end_timestamp events.cargo_port_unload_event.0.start_timestamp 0 1998 ALSIA SWAN Clean products Lube Oils 2017-08-01T06:10:45+0000 2017-08-27T14:38:15+0000 1 16559 IVER AMBITION Dirty products nan 2017-08-02T17:20:51+0000 2017-09-07T07:52:20+0000 2 522288 BLUE SUN Crude Gharib 2017-08-02T04:22:09+0000 2017-08-13T10:32:09+0000 3 46260 XINWANYU16 Clean products Chemicals 2017-08-01T01:07:40+0000 2017-08-10T06:21:43+0000 Alternatively, you can copy the contents of example_load_cargo_movements.py into a file named example.py and run python example.py from your terminal or powershell console.","title":"Example"},{"location":"#next-steps","text":"Learn how to call Endpoints","title":"Next Steps"},{"location":"#glossary","text":"The Glossary can be found at Vortexa API Documentation . The Glossary outlines key terms, functions and assumptions aimed at helping to extract powerful findings from our data.","title":"Glossary"},{"location":"#documentation","text":"Read the documentation at VortexaSDK Docs","title":"Documentation"},{"location":"#contributing","text":"We welcome contributions! Please read our Contributing Guide for ways to offer feedback and contributions. Thanks goes to these wonderful contributors ( emoji key ): Kit Burgess \ud83c\udfa8 \ud83d\udcbb tinovs \ud83d\udcbb \ud83d\udc40 David Andrew Starkey \ud83d\udcbb \ud83d\udcd6 \ud83d\udca1 syed \ud83d\udc40 Jakub Korzeniowski \ud83e\udd14 Edward Wright \ud83d\udcd3 Patrick Roddy \ud83d\udcd3 Romain \ud83d\udcd3 \ud83e\udd14 Natday \ud83d\udcbc \ud83e\udd14 \ud83d\udcd3 ArthurD1 \ud83d\udcd3 Chloe Connor \ud83d\udcd3 Achilleas Sfakianakis \ud83d\udcd3 This project follows the all-contributors specification. Contributions of any kind welcome!","title":"Contributing"},{"location":"config/","text":"Config The VortexaSDK can be configured using environment variables. Environment Variable Default Description VORTEXA_API_KEY none API Key used to access the VortexaAPI. Refer to Vortexa API Authentication for more details, including instructions on where to find your API key. LOG_FILE none Output log file LOG_LEVEL INFO Configure the level of must be one of [\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\"]","title":"Config"},{"location":"config/#config","text":"The VortexaSDK can be configured using environment variables. Environment Variable Default Description VORTEXA_API_KEY none API Key used to access the VortexaAPI. Refer to Vortexa API Authentication for more details, including instructions on where to find your API key. LOG_FILE none Output log file LOG_LEVEL INFO Configure the level of must be one of [\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\"]","title":"Config"},{"location":"faq/","text":"Why do my requests hang or run in an infinite loop? On Windows, it may be that your script doesn't check if __name__ == \"__main__\": before calling the SDK. Your script should contain this check, just like in this example For more details on why if __name__ == \"__main__\": is required, check out this interesting stack overflow post on Windows multiprocessing. What's the difference between a cargo movement and a vessel movement? A cargo movement is defined as the complete journey of a quantity of oil from its origin terminal to its destination terminal, including all ship to ship (STS) transfers in-between. For example: Tanker X loads 1mn bl of crude from Houston and discharges onto another tanker Y offshore the US Gulf, which then discharges in Singapore. The cargo movement is for 1mn bl of crude oil from Houston to Singapore. The vessel movement for tanker X is Houston to US Gulf, while for tanker Y it is US Gulf to Singapore. When there is no STS transfer, a cargo movement and vessel movement is equivalent. A more detailed explanation can be found here Where can I find a list of products? Check out the Vortexa Glossary, which can be downloaded from here What's the difference in a trading region and a geographic region? Trading regions have been designed by Vortexa to try and group terminals, ports and countries around oil market conventions (e.g. northwest Europe, west Africa, etc) whereas geographic regions are much wider in scope (e.g. North America, Asia, Africa). Trading regions are more granular than geographic regions.","title":"General"},{"location":"faq/#why-do-my-requests-hang-or-run-in-an-infinite-loop","text":"On Windows, it may be that your script doesn't check if __name__ == \"__main__\": before calling the SDK. Your script should contain this check, just like in this example For more details on why if __name__ == \"__main__\": is required, check out this interesting stack overflow post on Windows multiprocessing.","title":"Why do my requests hang or run in an infinite loop?"},{"location":"faq/#whats-the-difference-between-a-cargo-movement-and-a-vessel-movement","text":"A cargo movement is defined as the complete journey of a quantity of oil from its origin terminal to its destination terminal, including all ship to ship (STS) transfers in-between. For example: Tanker X loads 1mn bl of crude from Houston and discharges onto another tanker Y offshore the US Gulf, which then discharges in Singapore. The cargo movement is for 1mn bl of crude oil from Houston to Singapore. The vessel movement for tanker X is Houston to US Gulf, while for tanker Y it is US Gulf to Singapore. When there is no STS transfer, a cargo movement and vessel movement is equivalent. A more detailed explanation can be found here","title":"What's the difference between a cargo movement and a vessel movement?"},{"location":"faq/#where-can-i-find-a-list-of-products","text":"Check out the Vortexa Glossary, which can be downloaded from here","title":"Where can I find a list of products?"},{"location":"faq/#whats-the-difference-in-a-trading-region-and-a-geographic-region","text":"Trading regions have been designed by Vortexa to try and group terminals, ports and countries around oil market conventions (e.g. northwest Europe, west Africa, etc) whereas geographic regions are much wider in scope (e.g. North America, Asia, Africa). Trading regions are more granular than geographic regions.","title":"What's the difference in a trading region and a geographic region?"},{"location":"faq_setup/","text":"How to install Python on Windows using Anaconda Download the Python3.7 Graphical installer from the anaconda website Follow the conda installation instructions How do I install the SDK on Windows? First, open up an Anaconda Prompt. Hit the start button and type anaconda prompt. Use pip to install the sdk Run pip install --user vortexasdk in the anaconda command prompt You're done! The VortexaSDK has now been installed. How do I install the SDK on Mac / Linux? Type the following into a bash terminal $ pip install vortexasdk How do I add an environment variable on Windows? Hit the windows key, then type \"environment\" to open up a control panel settings page titled \"Edit the system environment variables\" In the System Properties window, click on the Advanced tab, then click the Environment Variables button near the bottom of that tab. Add a new user variable Where is my API Key? Refer to Vortexa API Authentication for details, including instructions on where to find your API key. How do I request an API Key? You can request a demo here . More details are given in docs.vortexa.com . Alternatively, please get in touch at www.vortexa.com . How can I check the VortexaSDK is setup correctly? You can run the check_setup.py file from your IDE, or from a bash console: $ python -m vortexasdk check-setup","title":"Setup"},{"location":"faq_setup/#how-to-install-python-on-windows-using-anaconda","text":"Download the Python3.7 Graphical installer from the anaconda website Follow the conda installation instructions","title":"How to install Python on Windows using Anaconda"},{"location":"faq_setup/#how-do-i-install-the-sdk-on-windows","text":"First, open up an Anaconda Prompt. Hit the start button and type anaconda prompt. Use pip to install the sdk Run pip install --user vortexasdk in the anaconda command prompt You're done! The VortexaSDK has now been installed.","title":"How do I install the SDK on Windows?"},{"location":"faq_setup/#how-do-i-install-the-sdk-on-mac-linux","text":"Type the following into a bash terminal $ pip install vortexasdk","title":"How do I install the SDK on Mac / Linux?"},{"location":"faq_setup/#how-do-i-add-an-environment-variable-on-windows","text":"Hit the windows key, then type \"environment\" to open up a control panel settings page titled \"Edit the system environment variables\" In the System Properties window, click on the Advanced tab, then click the Environment Variables button near the bottom of that tab. Add a new user variable","title":"How do I add an environment variable on Windows?"},{"location":"faq_setup/#where-is-my-api-key","text":"Refer to Vortexa API Authentication for details, including instructions on where to find your API key.","title":"Where is my API Key?"},{"location":"faq_setup/#how-do-i-request-an-api-key","text":"You can request a demo here . More details are given in docs.vortexa.com . Alternatively, please get in touch at www.vortexa.com .","title":"How do I request an API Key?"},{"location":"faq_setup/#how-can-i-check-the-vortexasdk-is-setup-correctly","text":"You can run the check_setup.py file from your IDE, or from a bash console: $ python -m vortexasdk check-setup","title":"How can I check the VortexaSDK is setup correctly?"},{"location":"config/config/","text":"Config The VortexaSDK can be configured using environment variables. Environment Variable Default Description VORTEXA_API_KEY none API Key used to access the VortexaAPI. Refer to Vortexa API Authentication for more details, including instructions on where to find your API key. LOG_FILE none Output log file LOG_LEVEL INFO Configure the level of must be one of [\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\"]","title":"Config"},{"location":"config/config/#config","text":"The VortexaSDK can be configured using environment variables. Environment Variable Default Description VORTEXA_API_KEY none API Key used to access the VortexaAPI. Refer to Vortexa API Authentication for more details, including instructions on where to find your API key. LOG_FILE none Output log file LOG_LEVEL INFO Configure the level of must be one of [\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\"]","title":"Config"},{"location":"endpoints/about-endpoints/","text":"About VortexaSDK Endpoints The endpoints module allows you to query Vortexa's data. The VortexaSDK currently contains 5 different endpoints: Cargo Movements Vessel Movements Charterers Geographies Products Vessels Each endpoint offers either one, or both, of two different functionalities: Lookup by ID . Retreive an object matching a certain id. In sql speak this is the equivalent of SELECT * FROM vessels WHERE id = 12345; Search . Retrieve a number of objects matching given search parameters. In sql speak this is the equivalent of SELECT * FROM vessels WHERE name ~* 'ocean' AND vessel_class = 'vlcc'; Let's explain with some examples: Find all aframax vessels from vortexasdk import Vessels df = Vessels().search(vessel_classes='aframax').to_df() Find the vessel that has with id 1245 vessel = Vessels().reference(id='12345')","title":"About Endpoints"},{"location":"endpoints/about-endpoints/#about-vortexasdk-endpoints","text":"The endpoints module allows you to query Vortexa's data. The VortexaSDK currently contains 5 different endpoints: Cargo Movements Vessel Movements Charterers Geographies Products Vessels Each endpoint offers either one, or both, of two different functionalities: Lookup by ID . Retreive an object matching a certain id. In sql speak this is the equivalent of SELECT * FROM vessels WHERE id = 12345; Search . Retrieve a number of objects matching given search parameters. In sql speak this is the equivalent of SELECT * FROM vessels WHERE name ~* 'ocean' AND vessel_class = 'vlcc'; Let's explain with some examples: Find all aframax vessels from vortexasdk import Vessels df = Vessels().search(vessel_classes='aframax').to_df() Find the vessel that has with id 1245 vessel = Vessels().reference(id='12345')","title":"About VortexaSDK Endpoints"},{"location":"endpoints/cargo_movements/","text":"vortexasdk.endpoints.cargo_movements Cargo Movements Endpoint. CargoMovements CargoMovements(self) Cargo Movements Endpoint, use this to search through Vortexa's cargo movements. A detailed explanation of Cargo/Vessel Movements can be found here . search CargoMovements.search(self, filter_activity: str, filter_time_min: datetime.datetime = datetime.datetime(2019, 10, 1, 0, 0), filter_time_max: datetime.datetime = datetime.datetime(2019, 10, 1, 1, 0), cm_unit: str = 'b', filter_charterers: Union[str, List[str]] = None, filter_destinations: Union[str, List[str]] = None, filter_origins: Union[str, List[str]] = None, filter_owners: Union[str, List[str]] = None, filter_products: Union[str, List[str]] = None, filter_vessels: Union[str, List[str]] = None, filter_storage_locations: Union[str, List[str]] = None, filter_ship_to_ship_locations: Union[str, List[str]] = None, filter_waypoints: Union[str, List[str]] = None, disable_geographic_exclusion_rules: bool = None, timeseries_activity_time_span_min: int = None, timeseries_activity_time_span_max: int = None) -> vortexasdk.endpoints.cargo_movements_result.CargoMovementsResult Find CargoMovements matching the given search parameters. Arguments filter_activity : Movement activity on which to base the time filter. Must be one of ['loading_state', 'loading_start', 'loading_end', 'identified_for_loading_state', 'unloading_state', 'unloading_start', 'unloading_end', 'unloaded_state', 'storing_state', 'storing_start', 'storing_end', 'transiting_state', 'any_activity']. filter_time_min : The UTC start date of the time filter. filter_time_max : The UTC end date of the time filter. cm_unit : Unit of measurement. Enter 'b' for barrels or 't' for tonnes. filter_corporations : A corporation ID, or list of corporation IDs to filter on. filter_destinations : A geography ID, or list of geography IDs to filter on. filter_origins : A geography ID, or list of geography IDs to filter on. filter_owners : An owner ID, or list of owner IDs to filter on. filter_products : A product ID, or list of product IDs to filter on. filter_vessels : A vessel ID, or list of vessel IDs to filter on. filter_storage_locations : A geography ID, or list of geography IDs to filter on. filter_ship_to_ship_locations : A geography ID, or list of geography IDs to filter on. filter_waypoints : A geography ID, or list of geography IDs to filter on. disable_geographic_exclusion_rules : This controls a popular industry term \"intra-movements\" and determines the filter behaviour for cargo leaving then entering the same geographic area. timeseries_activity_time_span_min : The minimum amount of time in milliseconds accounted for in a time series activity. Can be used to request long-term floating storage. For example, to only return floating storage movements that occured for more than 14 days enter timeseries_activity_time_span_min=1000 * 60 * 60 * 24 * 14 in conjunction with filter_activity='storing_state' . timeseries_activity_time_span_max : The maximum amount of time in milliseconds accounted for in a time series activity. Can be used to request short-term floating storage. For example, to only return floating storage movements that occured for less than 14 days enter timeseries_activity_time_span_max=1000 * 60 * 60 * 24 * 14 in conjunction with filter_activity='storing_state' . Returns CargoMovementsResult , containing all the cargo movements matching the given search terms. Example Which cargoes were loaded from Rotterdam on the morning of 1st December 2018? >>> from vortexasdk import CargoMovements, Geographies >>> rotterdam = [g.id for g in Geographies().search(\"rotterdam\").to_list() if \"port\" in g.layer] >>> search_result = CargoMovements().search( ... filter_origins=rotterdam, ... filter_activity='loading_state', ... filter_time_min=datetime(2018, 12, 1), ... filter_time_max=datetime(2018, 12, 1, 12)) >>> df = search_result.to_df(columns=['product.grade.label', 'product.group.label', 'vessels.0.vessel_class']) product.group.label product.grade.label vessels.0.vessel_class 0 Clean products Pygas general_purpose 1 Clean products Chemicals tiny_tanker 2 Clean products Chemicals tiny_tanker 3 Dirty products Low Sulphur VGO (LSVGO) general_purpose 4 Clean products ULSD (Ultra Low Sulphur Diesel) general_purpose 5 Clean products Chemicals tiny_tanker 6 Clean products Finished Gasoline handymax Which VLCC cargoes passed through the Suez canal en route to China? Note here we include vessels.0..., vessels.1..., vessels.2... columns. This lets us view all vessels present in any STS operations. >>> from vortexasdk import CargoMovements, Geographies, Vessels >>> suez = [g.id for g in Geographies().search(\"suez\").to_list()] >>> china = [g.id for g in Geographies().search(\"china\").to_list() if \"country\" in g.layer] >>> vlccs = [v.id for v in Vessels().search(vessel_classes=\"vlcc_plus\").to_list()] >>> cargo_movement_search_result = CargoMovements().search( ... filter_destinations=china, ... filter_activity=\"loading_state\", ... filter_waypoints=suez, ... filter_vessels=vlccs, ... filter_time_min=datetime(2018, 12, 1), ... filter_time_max=datetime(2018, 12, 1)) >>> cols = ['vessels.0.name', 'vessels.0.vessel_class', 'vessels.1.name', 'vessels.1.vessel_class', 'vessels.2.name', 'vessels.2.vessel_class', 'product.group.label', 'quantity'] >>> cargo_movements_df = cargo_movement_search_result.to_df(columns=cols) vessels.0.name vessels.0.vessel_class vessels.1.name vessels.1.vessel_class vessels.2.name vessels.2.vessel_class product.group.label quantity 0 MINERVA MARINA suezmax COSGLORY LAKE vlcc_plus nan nan Crude 700614 1 BUKHA vlcc_plus nan nan nan nan Crude 1896374 2 ATHENIAN FREEDOM vlcc_plus nan nan nan nan Crude 183537 3 ATINA suezmax DONAT suezmax DS VISION vlcc_plus Crude 896773 4 MINERVA MARINA suezmax COSGLORY LAKE vlcc_plus nan nan Crude 405724 5 MASAL suezmax EKTA vlcc_plus nan nan Crude 997896 6 ATHENIAN FREEDOM vlcc_plus nan nan nan nan Crude 120812 Cargo Movements Endpoint Further Documentation vortexasdk.endpoints.cargo_movements_result CargoMovementsResult CargoMovementsResult(self, _records: List) -> None Container class holdings search results returns from the cargo movements endpoint. This class has two methods, to_list() , and to_df() , allowing search results to be represented as a list of CargoMovements , or as a pd.DataFrame , respectively. to_list CargoMovementsResult.to_list(self) -> List[vortexasdk.api.cargo_movement.CargoMovement] Represent cargo movements as a list of CargoMovementEntity s. to_df CargoMovementsResult.to_df(self, columns=None) -> pandas.core.frame.DataFrame Represent cargo movements as a pd.DataFrame . Arguments columns : Output columns present in the pd.DataFrame . Enter columns='all' to return all available columns. Enter columns=None to use cargo_movements.DEFAULT_COLUMNS . Returns pd.DataFrame , one row per cargo movement. Notes A cargo movement is a complicated, nested structure. Between it's point of loading and discharge, a cargo movement may be carried by N or more vessels, with N-1 associated STS events. Each of these N vessels could have an associated corporate owner, charterer, time charterer... etc. In order to represent a cargo movement as a flat (not nested) record in a dataframe, the sdk flattens the cargo movement, generating many columns in the process. The columns are logically named. Let's say that a cargo is transferred between 4 vessels en route from a load in Rotterdam to a discharge in New York. This is represented as 1 cargo_port_unload_event , followed by 3 cargo_sts_event s, and finally 1 cargo_port_unload_event . In this example the name of the 1st vessel, is found in the vessels.0.name column (we're using zero-based numbering indexes). Likewise, the imo of the second vessel is found in the vessels.1.imo column. To find the name of the country in which the second STS event occured, we'd use the events.cargo_sts_event.1.location.country.layer column. Similarly, to find out when the first vessel started loading the cargo from Rotterdam, we'd use the events.cargo_port_load_event.0.start_timestamp column. By default, the columns returned are something along the lines of. DEFAULT_COLUMNS = [ 'events.cargo_port_load_event.0.location.port.label', 'events.cargo_port_unload_event.0.location.port.label', 'product.group.label', 'product.grade.label', 'quantity', 'vessels.0.name', 'events.cargo_port_load_event.0.end_timestamp', 'events.cargo_port_unload_event.0.start_timestamp', ] The exact default columns used can be found at cargo_movements.DEFAULT_COLUMNS A near complete list of columns is given below [ 'cargo_movement_id', 'events.cargo_fso_load_event.0.end_timestamp', 'events.cargo_fso_load_event.0.event_type', 'events.cargo_fso_load_event.0.fso_vessel_id', 'events.cargo_fso_load_event.0.fso_vessel_name', 'events.cargo_fso_load_event.0.location.country.id', 'events.cargo_fso_load_event.0.location.country.label', 'events.cargo_fso_load_event.0.location.country.layer', 'events.cargo_fso_load_event.0.location.country.probability', 'events.cargo_fso_load_event.0.location.country.source', 'events.cargo_fso_load_event.0.location.region.id', 'events.cargo_fso_load_event.0.location.region.label', 'events.cargo_fso_load_event.0.location.region.layer', 'events.cargo_fso_load_event.0.location.region.probability', 'events.cargo_fso_load_event.0.location.region.source', 'events.cargo_fso_load_event.0.location.shipping_region.id', 'events.cargo_fso_load_event.0.location.shipping_region.label', 'events.cargo_fso_load_event.0.location.shipping_region.layer', 'events.cargo_fso_load_event.0.location.shipping_region.probability', 'events.cargo_fso_load_event.0.location.shipping_region.source', 'events.cargo_fso_load_event.0.location.sts_zone.id', 'events.cargo_fso_load_event.0.location.sts_zone.label', 'events.cargo_fso_load_event.0.location.sts_zone.layer', 'events.cargo_fso_load_event.0.location.sts_zone.probability', 'events.cargo_fso_load_event.0.location.sts_zone.source', 'events.cargo_fso_load_event.0.location.trading_block.id', 'events.cargo_fso_load_event.0.location.trading_block.label', 'events.cargo_fso_load_event.0.location.trading_block.layer', 'events.cargo_fso_load_event.0.location.trading_block.probability', 'events.cargo_fso_load_event.0.location.trading_block.source', 'events.cargo_fso_load_event.0.location.trading_region.id', 'events.cargo_fso_load_event.0.location.trading_region.label', 'events.cargo_fso_load_event.0.location.trading_region.layer', 'events.cargo_fso_load_event.0.location.trading_region.probability', 'events.cargo_fso_load_event.0.location.trading_region.source', 'events.cargo_fso_load_event.0.location.trading_subregion.id', 'events.cargo_fso_load_event.0.location.trading_subregion.label', 'events.cargo_fso_load_event.0.location.trading_subregion.layer', 'events.cargo_fso_load_event.0.location.trading_subregion.probability', 'events.cargo_fso_load_event.0.location.trading_subregion.source', 'events.cargo_fso_load_event.0.pos.0', 'events.cargo_fso_load_event.0.pos.1', 'events.cargo_fso_load_event.0.probability', 'events.cargo_fso_load_event.0.start_timestamp', 'events.cargo_fso_load_event.0.to_vessel_id', 'events.cargo_fso_load_event.0.to_vessel_name', 'events.cargo_fso_unload_event.0.end_timestamp', 'events.cargo_fso_unload_event.0.event_type', 'events.cargo_fso_unload_event.0.from_vessel_id', 'events.cargo_fso_unload_event.0.from_vessel_name', 'events.cargo_fso_unload_event.0.fso_vessel_id', 'events.cargo_fso_unload_event.0.fso_vessel_name', 'events.cargo_fso_unload_event.0.location.country.id', 'events.cargo_fso_unload_event.0.location.country.label', 'events.cargo_fso_unload_event.0.location.country.layer', 'events.cargo_fso_unload_event.0.location.country.probability', 'events.cargo_fso_unload_event.0.location.country.source', 'events.cargo_fso_unload_event.0.location.region.id', 'events.cargo_fso_unload_event.0.location.region.label', 'events.cargo_fso_unload_event.0.location.region.layer', 'events.cargo_fso_unload_event.0.location.region.probability', 'events.cargo_fso_unload_event.0.location.region.source', 'events.cargo_fso_unload_event.0.location.shipping_region.id', 'events.cargo_fso_unload_event.0.location.shipping_region.label', 'events.cargo_fso_unload_event.0.location.shipping_region.layer', 'events.cargo_fso_unload_event.0.location.shipping_region.probability', 'events.cargo_fso_unload_event.0.location.shipping_region.source', 'events.cargo_fso_unload_event.0.location.sts_zone.id', 'events.cargo_fso_unload_event.0.location.sts_zone.label', 'events.cargo_fso_unload_event.0.location.sts_zone.layer', 'events.cargo_fso_unload_event.0.location.sts_zone.probability', 'events.cargo_fso_unload_event.0.location.sts_zone.source', 'events.cargo_fso_unload_event.0.location.trading_block.id', 'events.cargo_fso_unload_event.0.location.trading_block.label', 'events.cargo_fso_unload_event.0.location.trading_block.layer', 'events.cargo_fso_unload_event.0.location.trading_block.probability', 'events.cargo_fso_unload_event.0.location.trading_block.source', 'events.cargo_fso_unload_event.0.location.trading_region.id', 'events.cargo_fso_unload_event.0.location.trading_region.label', 'events.cargo_fso_unload_event.0.location.trading_region.layer', 'events.cargo_fso_unload_event.0.location.trading_region.probability', 'events.cargo_fso_unload_event.0.location.trading_region.source', 'events.cargo_fso_unload_event.0.location.trading_subregion.id', 'events.cargo_fso_unload_event.0.location.trading_subregion.label', 'events.cargo_fso_unload_event.0.location.trading_subregion.layer', 'events.cargo_fso_unload_event.0.location.trading_subregion.probability', 'events.cargo_fso_unload_event.0.location.trading_subregion.source', 'events.cargo_fso_unload_event.0.pos.0', 'events.cargo_fso_unload_event.0.pos.1', 'events.cargo_fso_unload_event.0.probability', 'events.cargo_fso_unload_event.0.start_timestamp', 'events.cargo_port_load_event.0.end_timestamp', 'events.cargo_port_load_event.0.event_type', 'events.cargo_port_load_event.0.location.country.id', 'events.cargo_port_load_event.0.location.country.label', 'events.cargo_port_load_event.0.location.country.layer', 'events.cargo_port_load_event.0.location.country.probability', 'events.cargo_port_load_event.0.location.country.source', 'events.cargo_port_load_event.0.location.port.id', 'events.cargo_port_load_event.0.location.port.label', 'events.cargo_port_load_event.0.location.port.layer', 'events.cargo_port_load_event.0.location.port.probability', 'events.cargo_port_load_event.0.location.port.source', 'events.cargo_port_load_event.0.location.region.id', 'events.cargo_port_load_event.0.location.region.label', 'events.cargo_port_load_event.0.location.region.layer', 'events.cargo_port_load_event.0.location.region.probability', 'events.cargo_port_load_event.0.location.region.source', 'events.cargo_port_load_event.0.location.shipping_region.id', 'events.cargo_port_load_event.0.location.shipping_region.label', 'events.cargo_port_load_event.0.location.shipping_region.layer', 'events.cargo_port_load_event.0.location.shipping_region.probability', 'events.cargo_port_load_event.0.location.shipping_region.source', 'events.cargo_port_load_event.0.location.terminal.id', 'events.cargo_port_load_event.0.location.terminal.label', 'events.cargo_port_load_event.0.location.terminal.layer', 'events.cargo_port_load_event.0.location.terminal.probability', 'events.cargo_port_load_event.0.location.terminal.source', 'events.cargo_port_load_event.0.location.trading_block.id', 'events.cargo_port_load_event.0.location.trading_block.label', 'events.cargo_port_load_event.0.location.trading_block.layer', 'events.cargo_port_load_event.0.location.trading_block.probability', 'events.cargo_port_load_event.0.location.trading_block.source', 'events.cargo_port_load_event.0.location.trading_region.id', 'events.cargo_port_load_event.0.location.trading_region.label', 'events.cargo_port_load_event.0.location.trading_region.layer', 'events.cargo_port_load_event.0.location.trading_region.probability', 'events.cargo_port_load_event.0.location.trading_region.source', 'events.cargo_port_load_event.0.location.trading_subregion.id', 'events.cargo_port_load_event.0.location.trading_subregion.label', 'events.cargo_port_load_event.0.location.trading_subregion.layer', 'events.cargo_port_load_event.0.location.trading_subregion.probability', 'events.cargo_port_load_event.0.location.trading_subregion.source', 'events.cargo_port_load_event.0.pos.0', 'events.cargo_port_load_event.0.pos.1', 'events.cargo_port_load_event.0.probability', 'events.cargo_port_load_event.0.start_timestamp', 'events.cargo_port_unload_event.0.end_timestamp', 'events.cargo_port_unload_event.0.event_type', 'events.cargo_port_unload_event.0.location.country.id', 'events.cargo_port_unload_event.0.location.country.label', 'events.cargo_port_unload_event.0.location.country.layer', 'events.cargo_port_unload_event.0.location.country.probability', 'events.cargo_port_unload_event.0.location.country.source', 'events.cargo_port_unload_event.0.location.port.id', 'events.cargo_port_unload_event.0.location.port.label', 'events.cargo_port_unload_event.0.location.port.layer', 'events.cargo_port_unload_event.0.location.port.probability', 'events.cargo_port_unload_event.0.location.port.source', 'events.cargo_port_unload_event.0.location.region.id', 'events.cargo_port_unload_event.0.location.region.label', 'events.cargo_port_unload_event.0.location.region.layer', 'events.cargo_port_unload_event.0.location.region.probability', 'events.cargo_port_unload_event.0.location.region.source', 'events.cargo_port_unload_event.0.location.shipping_region.id', 'events.cargo_port_unload_event.0.location.shipping_region.label', 'events.cargo_port_unload_event.0.location.shipping_region.layer', 'events.cargo_port_unload_event.0.location.shipping_region.probability', 'events.cargo_port_unload_event.0.location.shipping_region.source', 'events.cargo_port_unload_event.0.location.sts_zone.id', 'events.cargo_port_unload_event.0.location.sts_zone.label', 'events.cargo_port_unload_event.0.location.sts_zone.layer', 'events.cargo_port_unload_event.0.location.sts_zone.probability', 'events.cargo_port_unload_event.0.location.sts_zone.source', 'events.cargo_port_unload_event.0.location.terminal.id', 'events.cargo_port_unload_event.0.location.terminal.label', 'events.cargo_port_unload_event.0.location.terminal.layer', 'events.cargo_port_unload_event.0.location.terminal.probability', 'events.cargo_port_unload_event.0.location.terminal.source', 'events.cargo_port_unload_event.0.location.trading_block.id', 'events.cargo_port_unload_event.0.location.trading_block.label', 'events.cargo_port_unload_event.0.location.trading_block.layer', 'events.cargo_port_unload_event.0.location.trading_block.probability', 'events.cargo_port_unload_event.0.location.trading_block.source', 'events.cargo_port_unload_event.0.location.trading_region.id', 'events.cargo_port_unload_event.0.location.trading_region.label', 'events.cargo_port_unload_event.0.location.trading_region.layer', 'events.cargo_port_unload_event.0.location.trading_region.probability', 'events.cargo_port_unload_event.0.location.trading_region.source', 'events.cargo_port_unload_event.0.location.trading_subregion.id', 'events.cargo_port_unload_event.0.location.trading_subregion.label', 'events.cargo_port_unload_event.0.location.trading_subregion.layer', 'events.cargo_port_unload_event.0.location.trading_subregion.probability', 'events.cargo_port_unload_event.0.location.trading_subregion.source', 'events.cargo_port_unload_event.0.pos.0', 'events.cargo_port_unload_event.0.pos.1', 'events.cargo_port_unload_event.0.probability', 'events.cargo_port_unload_event.0.start_timestamp', 'events.cargo_storage_event.0.end_timestamp', 'events.cargo_storage_event.0.event_type', 'events.cargo_storage_event.0.location.country.id', 'events.cargo_storage_event.0.location.country.label', 'events.cargo_storage_event.0.location.country.layer', 'events.cargo_storage_event.0.location.country.probability', 'events.cargo_storage_event.0.location.country.source', 'events.cargo_storage_event.0.location.region.id', 'events.cargo_storage_event.0.location.region.label', 'events.cargo_storage_event.0.location.region.layer', 'events.cargo_storage_event.0.location.region.probability', 'events.cargo_storage_event.0.location.region.source', 'events.cargo_storage_event.0.location.shipping_region.id', 'events.cargo_storage_event.0.location.shipping_region.label', 'events.cargo_storage_event.0.location.shipping_region.layer', 'events.cargo_storage_event.0.location.shipping_region.probability', 'events.cargo_storage_event.0.location.shipping_region.source', 'events.cargo_storage_event.0.location.trading_block.id', 'events.cargo_storage_event.0.location.trading_block.label', 'events.cargo_storage_event.0.location.trading_block.layer', 'events.cargo_storage_event.0.location.trading_block.probability', 'events.cargo_storage_event.0.location.trading_block.source', 'events.cargo_storage_event.0.location.trading_region.id', 'events.cargo_storage_event.0.location.trading_region.label', 'events.cargo_storage_event.0.location.trading_region.layer', 'events.cargo_storage_event.0.location.trading_region.probability', 'events.cargo_storage_event.0.location.trading_region.source', 'events.cargo_storage_event.0.location.trading_subregion.id', 'events.cargo_storage_event.0.location.trading_subregion.label', 'events.cargo_storage_event.0.location.trading_subregion.layer', 'events.cargo_storage_event.0.location.trading_subregion.probability', 'events.cargo_storage_event.0.location.trading_subregion.source', 'events.cargo_storage_event.0.pos.0', 'events.cargo_storage_event.0.pos.1', 'events.cargo_storage_event.0.start_timestamp', 'events.cargo_storage_event.0.vessel_id', 'events.cargo_sts_event.0.end_timestamp', 'events.cargo_sts_event.0.event_type', 'events.cargo_sts_event.0.from_vessel_id', 'events.cargo_sts_event.0.from_vessel_name', 'events.cargo_sts_event.0.location.country.id', 'events.cargo_sts_event.0.location.country.label', 'events.cargo_sts_event.0.location.country.layer', 'events.cargo_sts_event.0.location.country.probability', 'events.cargo_sts_event.0.location.country.source', 'events.cargo_sts_event.0.location.port.id', 'events.cargo_sts_event.0.location.port.label', 'events.cargo_sts_event.0.location.port.layer', 'events.cargo_sts_event.0.location.port.probability', 'events.cargo_sts_event.0.location.port.source', 'events.cargo_sts_event.0.location.region.id', 'events.cargo_sts_event.0.location.region.label', 'events.cargo_sts_event.0.location.region.layer', 'events.cargo_sts_event.0.location.region.probability', 'events.cargo_sts_event.0.location.region.source', 'events.cargo_sts_event.0.location.shipping_region.id', 'events.cargo_sts_event.0.location.shipping_region.label', 'events.cargo_sts_event.0.location.shipping_region.layer', 'events.cargo_sts_event.0.location.shipping_region.probability', 'events.cargo_sts_event.0.location.shipping_region.source', 'events.cargo_sts_event.0.location.sts_zone.id', 'events.cargo_sts_event.0.location.sts_zone.label', 'events.cargo_sts_event.0.location.sts_zone.layer', 'events.cargo_sts_event.0.location.sts_zone.probability', 'events.cargo_sts_event.0.location.sts_zone.source', 'events.cargo_sts_event.0.location.trading_block.id', 'events.cargo_sts_event.0.location.trading_block.label', 'events.cargo_sts_event.0.location.trading_block.layer', 'events.cargo_sts_event.0.location.trading_block.probability', 'events.cargo_sts_event.0.location.trading_block.source', 'events.cargo_sts_event.0.location.trading_region.id', 'events.cargo_sts_event.0.location.trading_region.label', 'events.cargo_sts_event.0.location.trading_region.layer', 'events.cargo_sts_event.0.location.trading_region.probability', 'events.cargo_sts_event.0.location.trading_region.source', 'events.cargo_sts_event.0.location.trading_subregion.id', 'events.cargo_sts_event.0.location.trading_subregion.label', 'events.cargo_sts_event.0.location.trading_subregion.layer', 'events.cargo_sts_event.0.location.trading_subregion.probability', 'events.cargo_sts_event.0.location.trading_subregion.source', 'events.cargo_sts_event.0.pos.0', 'events.cargo_sts_event.0.pos.1', 'events.cargo_sts_event.0.start_timestamp', 'events.cargo_sts_event.0.to_vessel_id', 'events.cargo_sts_event.0.to_vessel_name', 'events.cargo_sts_event.1.end_timestamp', 'events.cargo_sts_event.1.event_type', 'events.cargo_sts_event.1.from_vessel_id', 'events.cargo_sts_event.1.from_vessel_name', 'events.cargo_sts_event.1.location.country.id', 'events.cargo_sts_event.1.location.country.label', 'events.cargo_sts_event.1.location.country.layer', 'events.cargo_sts_event.1.location.country.probability', 'events.cargo_sts_event.1.location.country.source', 'events.cargo_sts_event.1.location.region.id', 'events.cargo_sts_event.1.location.region.label', 'events.cargo_sts_event.1.location.region.layer', 'events.cargo_sts_event.1.location.region.probability', 'events.cargo_sts_event.1.location.region.source', 'events.cargo_sts_event.1.location.shipping_region.id', 'events.cargo_sts_event.1.location.shipping_region.label', 'events.cargo_sts_event.1.location.shipping_region.layer', 'events.cargo_sts_event.1.location.shipping_region.probability', 'events.cargo_sts_event.1.location.shipping_region.source', 'events.cargo_sts_event.1.location.sts_zone.id', 'events.cargo_sts_event.1.location.sts_zone.label', 'events.cargo_sts_event.1.location.sts_zone.layer', 'events.cargo_sts_event.1.location.sts_zone.probability', 'events.cargo_sts_event.1.location.sts_zone.source', 'events.cargo_sts_event.1.location.trading_block.id', 'events.cargo_sts_event.1.location.trading_block.label', 'events.cargo_sts_event.1.location.trading_block.layer', 'events.cargo_sts_event.1.location.trading_block.probability', 'events.cargo_sts_event.1.location.trading_block.source', 'events.cargo_sts_event.1.location.trading_region.id', 'events.cargo_sts_event.1.location.trading_region.label', 'events.cargo_sts_event.1.location.trading_region.layer', 'events.cargo_sts_event.1.location.trading_region.probability', 'events.cargo_sts_event.1.location.trading_region.source', 'events.cargo_sts_event.1.location.trading_subregion.id', 'events.cargo_sts_event.1.location.trading_subregion.label', 'events.cargo_sts_event.1.location.trading_subregion.layer', 'events.cargo_sts_event.1.location.trading_subregion.probability', 'events.cargo_sts_event.1.location.trading_subregion.source', 'events.cargo_sts_event.1.pos.0', 'events.cargo_sts_event.1.pos.1', 'events.cargo_sts_event.1.start_timestamp', 'events.cargo_sts_event.1.to_vessel_id', 'events.cargo_sts_event.1.to_vessel_name', 'product.category.id', 'product.category.label', 'product.category.layer', 'product.category.probability', 'product.category.source', 'product.grade.id', 'product.grade.label', 'product.grade.layer', 'product.grade.probability', 'product.grade.source', 'product.group.id', 'product.group.label', 'product.group.layer', 'product.group.probability', 'product.group.source', 'product.group_product.id', 'product.group_product.label', 'product.group_product.layer', 'product.group_product.probability', 'product.group_product.source', 'quantity', 'status', 'vessels.0.corporate_entities.charterer.id', 'vessels.0.corporate_entities.charterer.label', 'vessels.0.corporate_entities.charterer.layer', 'vessels.0.corporate_entities.charterer.probability', 'vessels.0.corporate_entities.charterer.source', 'vessels.0.corporate_entities.commercial_owner.id', 'vessels.0.corporate_entities.commercial_owner.label', 'vessels.0.corporate_entities.commercial_owner.layer', 'vessels.0.corporate_entities.commercial_owner.probability', 'vessels.0.corporate_entities.commercial_owner.source', 'vessels.0.corporate_entities.time_charterer.end_timestamp', 'vessels.0.corporate_entities.time_charterer.id', 'vessels.0.corporate_entities.time_charterer.label', 'vessels.0.corporate_entities.time_charterer.layer', 'vessels.0.corporate_entities.time_charterer.probability', 'vessels.0.corporate_entities.time_charterer.source', 'vessels.0.corporate_entities.time_charterer.start_timestamp', 'vessels.0.cubic_capacity', 'vessels.0.dwt', 'vessels.0.end_timestamp', 'vessels.0.fixture_fulfilled', 'vessels.0.fixture_id', 'vessels.0.id', 'vessels.0.imo', 'vessels.0.mmsi', 'vessels.0.name', 'vessels.0.start_timestamp', 'vessels.0.status', 'vessels.0.tags.0.end_timestamp', 'vessels.0.tags.0.start_timestamp', 'vessels.0.tags.0.tag', 'vessels.0.vessel_class', 'vessels.0.voyage_id', 'vessels.1.corporate_entities.charterer.id', 'vessels.1.corporate_entities.charterer.label', 'vessels.1.corporate_entities.charterer.layer', 'vessels.1.corporate_entities.charterer.probability', 'vessels.1.corporate_entities.charterer.source', 'vessels.1.corporate_entities.commercial_owner.id', 'vessels.1.corporate_entities.commercial_owner.label', 'vessels.1.corporate_entities.commercial_owner.layer', 'vessels.1.corporate_entities.commercial_owner.probability', 'vessels.1.corporate_entities.commercial_owner.source', 'vessels.1.corporate_entities.time_charterer.end_timestamp', 'vessels.1.corporate_entities.time_charterer.id', 'vessels.1.corporate_entities.time_charterer.label', 'vessels.1.corporate_entities.time_charterer.layer', 'vessels.1.corporate_entities.time_charterer.probability', 'vessels.1.corporate_entities.time_charterer.source', 'vessels.1.corporate_entities.time_charterer.start_timestamp', 'vessels.1.cubic_capacity', 'vessels.1.dwt', 'vessels.1.end_timestamp', 'vessels.1.fixture_fulfilled', 'vessels.1.id', 'vessels.1.imo', 'vessels.1.mmsi', 'vessels.1.name', 'vessels.1.start_timestamp', 'vessels.1.status', 'vessels.1.tags.0.end_timestamp', 'vessels.1.tags.0.start_timestamp', 'vessels.1.tags.0.tag', 'vessels.1.vessel_class', 'vessels.1.voyage_id', 'vessels.2.corporate_entities.charterer.id', 'vessels.2.corporate_entities.charterer.label', 'vessels.2.corporate_entities.charterer.layer', 'vessels.2.corporate_entities.charterer.probability', 'vessels.2.corporate_entities.charterer.source', 'vessels.2.corporate_entities.commercial_owner.id', 'vessels.2.corporate_entities.commercial_owner.label', 'vessels.2.corporate_entities.commercial_owner.layer', 'vessels.2.corporate_entities.commercial_owner.probability', 'vessels.2.corporate_entities.commercial_owner.source', 'vessels.2.corporate_entities.time_charterer.end_timestamp', 'vessels.2.corporate_entities.time_charterer.id', 'vessels.2.corporate_entities.time_charterer.label', 'vessels.2.corporate_entities.time_charterer.layer', 'vessels.2.corporate_entities.time_charterer.probability', 'vessels.2.corporate_entities.time_charterer.source', 'vessels.2.corporate_entities.time_charterer.start_timestamp', 'vessels.2.cubic_capacity', 'vessels.2.dwt', 'vessels.2.end_timestamp', 'vessels.2.id', 'vessels.2.imo', 'vessels.2.mmsi', 'vessels.2.name', 'vessels.2.start_timestamp', 'vessels.2.status', 'vessels.2.tags.0.start_timestamp', 'vessels.2.tags.0.tag', 'vessels.2.vessel_class', 'vessels.2.voyage_id', 'vessels.3.corporate_entities.commercial_owner.id', 'vessels.3.corporate_entities.commercial_owner.label', 'vessels.3.corporate_entities.commercial_owner.layer', 'vessels.3.corporate_entities.commercial_owner.probability', 'vessels.3.corporate_entities.commercial_owner.source', 'vessels.3.cubic_capacity', 'vessels.3.dwt', 'vessels.3.id', 'vessels.3.imo', 'vessels.3.mmsi', 'vessels.3.name', 'vessels.3.start_timestamp', 'vessels.3.status', 'vessels.3.vessel_class', 'vessels.3.voyage_id', ]","title":"Cargo Movements"},{"location":"endpoints/cargo_movements/#notes","text":"A cargo movement is a complicated, nested structure. Between it's point of loading and discharge, a cargo movement may be carried by N or more vessels, with N-1 associated STS events. Each of these N vessels could have an associated corporate owner, charterer, time charterer... etc. In order to represent a cargo movement as a flat (not nested) record in a dataframe, the sdk flattens the cargo movement, generating many columns in the process. The columns are logically named. Let's say that a cargo is transferred between 4 vessels en route from a load in Rotterdam to a discharge in New York. This is represented as 1 cargo_port_unload_event , followed by 3 cargo_sts_event s, and finally 1 cargo_port_unload_event . In this example the name of the 1st vessel, is found in the vessels.0.name column (we're using zero-based numbering indexes). Likewise, the imo of the second vessel is found in the vessels.1.imo column. To find the name of the country in which the second STS event occured, we'd use the events.cargo_sts_event.1.location.country.layer column. Similarly, to find out when the first vessel started loading the cargo from Rotterdam, we'd use the events.cargo_port_load_event.0.start_timestamp column. By default, the columns returned are something along the lines of. DEFAULT_COLUMNS = [ 'events.cargo_port_load_event.0.location.port.label', 'events.cargo_port_unload_event.0.location.port.label', 'product.group.label', 'product.grade.label', 'quantity', 'vessels.0.name', 'events.cargo_port_load_event.0.end_timestamp', 'events.cargo_port_unload_event.0.start_timestamp', ] The exact default columns used can be found at cargo_movements.DEFAULT_COLUMNS A near complete list of columns is given below [ 'cargo_movement_id', 'events.cargo_fso_load_event.0.end_timestamp', 'events.cargo_fso_load_event.0.event_type', 'events.cargo_fso_load_event.0.fso_vessel_id', 'events.cargo_fso_load_event.0.fso_vessel_name', 'events.cargo_fso_load_event.0.location.country.id', 'events.cargo_fso_load_event.0.location.country.label', 'events.cargo_fso_load_event.0.location.country.layer', 'events.cargo_fso_load_event.0.location.country.probability', 'events.cargo_fso_load_event.0.location.country.source', 'events.cargo_fso_load_event.0.location.region.id', 'events.cargo_fso_load_event.0.location.region.label', 'events.cargo_fso_load_event.0.location.region.layer', 'events.cargo_fso_load_event.0.location.region.probability', 'events.cargo_fso_load_event.0.location.region.source', 'events.cargo_fso_load_event.0.location.shipping_region.id', 'events.cargo_fso_load_event.0.location.shipping_region.label', 'events.cargo_fso_load_event.0.location.shipping_region.layer', 'events.cargo_fso_load_event.0.location.shipping_region.probability', 'events.cargo_fso_load_event.0.location.shipping_region.source', 'events.cargo_fso_load_event.0.location.sts_zone.id', 'events.cargo_fso_load_event.0.location.sts_zone.label', 'events.cargo_fso_load_event.0.location.sts_zone.layer', 'events.cargo_fso_load_event.0.location.sts_zone.probability', 'events.cargo_fso_load_event.0.location.sts_zone.source', 'events.cargo_fso_load_event.0.location.trading_block.id', 'events.cargo_fso_load_event.0.location.trading_block.label', 'events.cargo_fso_load_event.0.location.trading_block.layer', 'events.cargo_fso_load_event.0.location.trading_block.probability', 'events.cargo_fso_load_event.0.location.trading_block.source', 'events.cargo_fso_load_event.0.location.trading_region.id', 'events.cargo_fso_load_event.0.location.trading_region.label', 'events.cargo_fso_load_event.0.location.trading_region.layer', 'events.cargo_fso_load_event.0.location.trading_region.probability', 'events.cargo_fso_load_event.0.location.trading_region.source', 'events.cargo_fso_load_event.0.location.trading_subregion.id', 'events.cargo_fso_load_event.0.location.trading_subregion.label', 'events.cargo_fso_load_event.0.location.trading_subregion.layer', 'events.cargo_fso_load_event.0.location.trading_subregion.probability', 'events.cargo_fso_load_event.0.location.trading_subregion.source', 'events.cargo_fso_load_event.0.pos.0', 'events.cargo_fso_load_event.0.pos.1', 'events.cargo_fso_load_event.0.probability', 'events.cargo_fso_load_event.0.start_timestamp', 'events.cargo_fso_load_event.0.to_vessel_id', 'events.cargo_fso_load_event.0.to_vessel_name', 'events.cargo_fso_unload_event.0.end_timestamp', 'events.cargo_fso_unload_event.0.event_type', 'events.cargo_fso_unload_event.0.from_vessel_id', 'events.cargo_fso_unload_event.0.from_vessel_name', 'events.cargo_fso_unload_event.0.fso_vessel_id', 'events.cargo_fso_unload_event.0.fso_vessel_name', 'events.cargo_fso_unload_event.0.location.country.id', 'events.cargo_fso_unload_event.0.location.country.label', 'events.cargo_fso_unload_event.0.location.country.layer', 'events.cargo_fso_unload_event.0.location.country.probability', 'events.cargo_fso_unload_event.0.location.country.source', 'events.cargo_fso_unload_event.0.location.region.id', 'events.cargo_fso_unload_event.0.location.region.label', 'events.cargo_fso_unload_event.0.location.region.layer', 'events.cargo_fso_unload_event.0.location.region.probability', 'events.cargo_fso_unload_event.0.location.region.source', 'events.cargo_fso_unload_event.0.location.shipping_region.id', 'events.cargo_fso_unload_event.0.location.shipping_region.label', 'events.cargo_fso_unload_event.0.location.shipping_region.layer', 'events.cargo_fso_unload_event.0.location.shipping_region.probability', 'events.cargo_fso_unload_event.0.location.shipping_region.source', 'events.cargo_fso_unload_event.0.location.sts_zone.id', 'events.cargo_fso_unload_event.0.location.sts_zone.label', 'events.cargo_fso_unload_event.0.location.sts_zone.layer', 'events.cargo_fso_unload_event.0.location.sts_zone.probability', 'events.cargo_fso_unload_event.0.location.sts_zone.source', 'events.cargo_fso_unload_event.0.location.trading_block.id', 'events.cargo_fso_unload_event.0.location.trading_block.label', 'events.cargo_fso_unload_event.0.location.trading_block.layer', 'events.cargo_fso_unload_event.0.location.trading_block.probability', 'events.cargo_fso_unload_event.0.location.trading_block.source', 'events.cargo_fso_unload_event.0.location.trading_region.id', 'events.cargo_fso_unload_event.0.location.trading_region.label', 'events.cargo_fso_unload_event.0.location.trading_region.layer', 'events.cargo_fso_unload_event.0.location.trading_region.probability', 'events.cargo_fso_unload_event.0.location.trading_region.source', 'events.cargo_fso_unload_event.0.location.trading_subregion.id', 'events.cargo_fso_unload_event.0.location.trading_subregion.label', 'events.cargo_fso_unload_event.0.location.trading_subregion.layer', 'events.cargo_fso_unload_event.0.location.trading_subregion.probability', 'events.cargo_fso_unload_event.0.location.trading_subregion.source', 'events.cargo_fso_unload_event.0.pos.0', 'events.cargo_fso_unload_event.0.pos.1', 'events.cargo_fso_unload_event.0.probability', 'events.cargo_fso_unload_event.0.start_timestamp', 'events.cargo_port_load_event.0.end_timestamp', 'events.cargo_port_load_event.0.event_type', 'events.cargo_port_load_event.0.location.country.id', 'events.cargo_port_load_event.0.location.country.label', 'events.cargo_port_load_event.0.location.country.layer', 'events.cargo_port_load_event.0.location.country.probability', 'events.cargo_port_load_event.0.location.country.source', 'events.cargo_port_load_event.0.location.port.id', 'events.cargo_port_load_event.0.location.port.label', 'events.cargo_port_load_event.0.location.port.layer', 'events.cargo_port_load_event.0.location.port.probability', 'events.cargo_port_load_event.0.location.port.source', 'events.cargo_port_load_event.0.location.region.id', 'events.cargo_port_load_event.0.location.region.label', 'events.cargo_port_load_event.0.location.region.layer', 'events.cargo_port_load_event.0.location.region.probability', 'events.cargo_port_load_event.0.location.region.source', 'events.cargo_port_load_event.0.location.shipping_region.id', 'events.cargo_port_load_event.0.location.shipping_region.label', 'events.cargo_port_load_event.0.location.shipping_region.layer', 'events.cargo_port_load_event.0.location.shipping_region.probability', 'events.cargo_port_load_event.0.location.shipping_region.source', 'events.cargo_port_load_event.0.location.terminal.id', 'events.cargo_port_load_event.0.location.terminal.label', 'events.cargo_port_load_event.0.location.terminal.layer', 'events.cargo_port_load_event.0.location.terminal.probability', 'events.cargo_port_load_event.0.location.terminal.source', 'events.cargo_port_load_event.0.location.trading_block.id', 'events.cargo_port_load_event.0.location.trading_block.label', 'events.cargo_port_load_event.0.location.trading_block.layer', 'events.cargo_port_load_event.0.location.trading_block.probability', 'events.cargo_port_load_event.0.location.trading_block.source', 'events.cargo_port_load_event.0.location.trading_region.id', 'events.cargo_port_load_event.0.location.trading_region.label', 'events.cargo_port_load_event.0.location.trading_region.layer', 'events.cargo_port_load_event.0.location.trading_region.probability', 'events.cargo_port_load_event.0.location.trading_region.source', 'events.cargo_port_load_event.0.location.trading_subregion.id', 'events.cargo_port_load_event.0.location.trading_subregion.label', 'events.cargo_port_load_event.0.location.trading_subregion.layer', 'events.cargo_port_load_event.0.location.trading_subregion.probability', 'events.cargo_port_load_event.0.location.trading_subregion.source', 'events.cargo_port_load_event.0.pos.0', 'events.cargo_port_load_event.0.pos.1', 'events.cargo_port_load_event.0.probability', 'events.cargo_port_load_event.0.start_timestamp', 'events.cargo_port_unload_event.0.end_timestamp', 'events.cargo_port_unload_event.0.event_type', 'events.cargo_port_unload_event.0.location.country.id', 'events.cargo_port_unload_event.0.location.country.label', 'events.cargo_port_unload_event.0.location.country.layer', 'events.cargo_port_unload_event.0.location.country.probability', 'events.cargo_port_unload_event.0.location.country.source', 'events.cargo_port_unload_event.0.location.port.id', 'events.cargo_port_unload_event.0.location.port.label', 'events.cargo_port_unload_event.0.location.port.layer', 'events.cargo_port_unload_event.0.location.port.probability', 'events.cargo_port_unload_event.0.location.port.source', 'events.cargo_port_unload_event.0.location.region.id', 'events.cargo_port_unload_event.0.location.region.label', 'events.cargo_port_unload_event.0.location.region.layer', 'events.cargo_port_unload_event.0.location.region.probability', 'events.cargo_port_unload_event.0.location.region.source', 'events.cargo_port_unload_event.0.location.shipping_region.id', 'events.cargo_port_unload_event.0.location.shipping_region.label', 'events.cargo_port_unload_event.0.location.shipping_region.layer', 'events.cargo_port_unload_event.0.location.shipping_region.probability', 'events.cargo_port_unload_event.0.location.shipping_region.source', 'events.cargo_port_unload_event.0.location.sts_zone.id', 'events.cargo_port_unload_event.0.location.sts_zone.label', 'events.cargo_port_unload_event.0.location.sts_zone.layer', 'events.cargo_port_unload_event.0.location.sts_zone.probability', 'events.cargo_port_unload_event.0.location.sts_zone.source', 'events.cargo_port_unload_event.0.location.terminal.id', 'events.cargo_port_unload_event.0.location.terminal.label', 'events.cargo_port_unload_event.0.location.terminal.layer', 'events.cargo_port_unload_event.0.location.terminal.probability', 'events.cargo_port_unload_event.0.location.terminal.source', 'events.cargo_port_unload_event.0.location.trading_block.id', 'events.cargo_port_unload_event.0.location.trading_block.label', 'events.cargo_port_unload_event.0.location.trading_block.layer', 'events.cargo_port_unload_event.0.location.trading_block.probability', 'events.cargo_port_unload_event.0.location.trading_block.source', 'events.cargo_port_unload_event.0.location.trading_region.id', 'events.cargo_port_unload_event.0.location.trading_region.label', 'events.cargo_port_unload_event.0.location.trading_region.layer', 'events.cargo_port_unload_event.0.location.trading_region.probability', 'events.cargo_port_unload_event.0.location.trading_region.source', 'events.cargo_port_unload_event.0.location.trading_subregion.id', 'events.cargo_port_unload_event.0.location.trading_subregion.label', 'events.cargo_port_unload_event.0.location.trading_subregion.layer', 'events.cargo_port_unload_event.0.location.trading_subregion.probability', 'events.cargo_port_unload_event.0.location.trading_subregion.source', 'events.cargo_port_unload_event.0.pos.0', 'events.cargo_port_unload_event.0.pos.1', 'events.cargo_port_unload_event.0.probability', 'events.cargo_port_unload_event.0.start_timestamp', 'events.cargo_storage_event.0.end_timestamp', 'events.cargo_storage_event.0.event_type', 'events.cargo_storage_event.0.location.country.id', 'events.cargo_storage_event.0.location.country.label', 'events.cargo_storage_event.0.location.country.layer', 'events.cargo_storage_event.0.location.country.probability', 'events.cargo_storage_event.0.location.country.source', 'events.cargo_storage_event.0.location.region.id', 'events.cargo_storage_event.0.location.region.label', 'events.cargo_storage_event.0.location.region.layer', 'events.cargo_storage_event.0.location.region.probability', 'events.cargo_storage_event.0.location.region.source', 'events.cargo_storage_event.0.location.shipping_region.id', 'events.cargo_storage_event.0.location.shipping_region.label', 'events.cargo_storage_event.0.location.shipping_region.layer', 'events.cargo_storage_event.0.location.shipping_region.probability', 'events.cargo_storage_event.0.location.shipping_region.source', 'events.cargo_storage_event.0.location.trading_block.id', 'events.cargo_storage_event.0.location.trading_block.label', 'events.cargo_storage_event.0.location.trading_block.layer', 'events.cargo_storage_event.0.location.trading_block.probability', 'events.cargo_storage_event.0.location.trading_block.source', 'events.cargo_storage_event.0.location.trading_region.id', 'events.cargo_storage_event.0.location.trading_region.label', 'events.cargo_storage_event.0.location.trading_region.layer', 'events.cargo_storage_event.0.location.trading_region.probability', 'events.cargo_storage_event.0.location.trading_region.source', 'events.cargo_storage_event.0.location.trading_subregion.id', 'events.cargo_storage_event.0.location.trading_subregion.label', 'events.cargo_storage_event.0.location.trading_subregion.layer', 'events.cargo_storage_event.0.location.trading_subregion.probability', 'events.cargo_storage_event.0.location.trading_subregion.source', 'events.cargo_storage_event.0.pos.0', 'events.cargo_storage_event.0.pos.1', 'events.cargo_storage_event.0.start_timestamp', 'events.cargo_storage_event.0.vessel_id', 'events.cargo_sts_event.0.end_timestamp', 'events.cargo_sts_event.0.event_type', 'events.cargo_sts_event.0.from_vessel_id', 'events.cargo_sts_event.0.from_vessel_name', 'events.cargo_sts_event.0.location.country.id', 'events.cargo_sts_event.0.location.country.label', 'events.cargo_sts_event.0.location.country.layer', 'events.cargo_sts_event.0.location.country.probability', 'events.cargo_sts_event.0.location.country.source', 'events.cargo_sts_event.0.location.port.id', 'events.cargo_sts_event.0.location.port.label', 'events.cargo_sts_event.0.location.port.layer', 'events.cargo_sts_event.0.location.port.probability', 'events.cargo_sts_event.0.location.port.source', 'events.cargo_sts_event.0.location.region.id', 'events.cargo_sts_event.0.location.region.label', 'events.cargo_sts_event.0.location.region.layer', 'events.cargo_sts_event.0.location.region.probability', 'events.cargo_sts_event.0.location.region.source', 'events.cargo_sts_event.0.location.shipping_region.id', 'events.cargo_sts_event.0.location.shipping_region.label', 'events.cargo_sts_event.0.location.shipping_region.layer', 'events.cargo_sts_event.0.location.shipping_region.probability', 'events.cargo_sts_event.0.location.shipping_region.source', 'events.cargo_sts_event.0.location.sts_zone.id', 'events.cargo_sts_event.0.location.sts_zone.label', 'events.cargo_sts_event.0.location.sts_zone.layer', 'events.cargo_sts_event.0.location.sts_zone.probability', 'events.cargo_sts_event.0.location.sts_zone.source', 'events.cargo_sts_event.0.location.trading_block.id', 'events.cargo_sts_event.0.location.trading_block.label', 'events.cargo_sts_event.0.location.trading_block.layer', 'events.cargo_sts_event.0.location.trading_block.probability', 'events.cargo_sts_event.0.location.trading_block.source', 'events.cargo_sts_event.0.location.trading_region.id', 'events.cargo_sts_event.0.location.trading_region.label', 'events.cargo_sts_event.0.location.trading_region.layer', 'events.cargo_sts_event.0.location.trading_region.probability', 'events.cargo_sts_event.0.location.trading_region.source', 'events.cargo_sts_event.0.location.trading_subregion.id', 'events.cargo_sts_event.0.location.trading_subregion.label', 'events.cargo_sts_event.0.location.trading_subregion.layer', 'events.cargo_sts_event.0.location.trading_subregion.probability', 'events.cargo_sts_event.0.location.trading_subregion.source', 'events.cargo_sts_event.0.pos.0', 'events.cargo_sts_event.0.pos.1', 'events.cargo_sts_event.0.start_timestamp', 'events.cargo_sts_event.0.to_vessel_id', 'events.cargo_sts_event.0.to_vessel_name', 'events.cargo_sts_event.1.end_timestamp', 'events.cargo_sts_event.1.event_type', 'events.cargo_sts_event.1.from_vessel_id', 'events.cargo_sts_event.1.from_vessel_name', 'events.cargo_sts_event.1.location.country.id', 'events.cargo_sts_event.1.location.country.label', 'events.cargo_sts_event.1.location.country.layer', 'events.cargo_sts_event.1.location.country.probability', 'events.cargo_sts_event.1.location.country.source', 'events.cargo_sts_event.1.location.region.id', 'events.cargo_sts_event.1.location.region.label', 'events.cargo_sts_event.1.location.region.layer', 'events.cargo_sts_event.1.location.region.probability', 'events.cargo_sts_event.1.location.region.source', 'events.cargo_sts_event.1.location.shipping_region.id', 'events.cargo_sts_event.1.location.shipping_region.label', 'events.cargo_sts_event.1.location.shipping_region.layer', 'events.cargo_sts_event.1.location.shipping_region.probability', 'events.cargo_sts_event.1.location.shipping_region.source', 'events.cargo_sts_event.1.location.sts_zone.id', 'events.cargo_sts_event.1.location.sts_zone.label', 'events.cargo_sts_event.1.location.sts_zone.layer', 'events.cargo_sts_event.1.location.sts_zone.probability', 'events.cargo_sts_event.1.location.sts_zone.source', 'events.cargo_sts_event.1.location.trading_block.id', 'events.cargo_sts_event.1.location.trading_block.label', 'events.cargo_sts_event.1.location.trading_block.layer', 'events.cargo_sts_event.1.location.trading_block.probability', 'events.cargo_sts_event.1.location.trading_block.source', 'events.cargo_sts_event.1.location.trading_region.id', 'events.cargo_sts_event.1.location.trading_region.label', 'events.cargo_sts_event.1.location.trading_region.layer', 'events.cargo_sts_event.1.location.trading_region.probability', 'events.cargo_sts_event.1.location.trading_region.source', 'events.cargo_sts_event.1.location.trading_subregion.id', 'events.cargo_sts_event.1.location.trading_subregion.label', 'events.cargo_sts_event.1.location.trading_subregion.layer', 'events.cargo_sts_event.1.location.trading_subregion.probability', 'events.cargo_sts_event.1.location.trading_subregion.source', 'events.cargo_sts_event.1.pos.0', 'events.cargo_sts_event.1.pos.1', 'events.cargo_sts_event.1.start_timestamp', 'events.cargo_sts_event.1.to_vessel_id', 'events.cargo_sts_event.1.to_vessel_name', 'product.category.id', 'product.category.label', 'product.category.layer', 'product.category.probability', 'product.category.source', 'product.grade.id', 'product.grade.label', 'product.grade.layer', 'product.grade.probability', 'product.grade.source', 'product.group.id', 'product.group.label', 'product.group.layer', 'product.group.probability', 'product.group.source', 'product.group_product.id', 'product.group_product.label', 'product.group_product.layer', 'product.group_product.probability', 'product.group_product.source', 'quantity', 'status', 'vessels.0.corporate_entities.charterer.id', 'vessels.0.corporate_entities.charterer.label', 'vessels.0.corporate_entities.charterer.layer', 'vessels.0.corporate_entities.charterer.probability', 'vessels.0.corporate_entities.charterer.source', 'vessels.0.corporate_entities.commercial_owner.id', 'vessels.0.corporate_entities.commercial_owner.label', 'vessels.0.corporate_entities.commercial_owner.layer', 'vessels.0.corporate_entities.commercial_owner.probability', 'vessels.0.corporate_entities.commercial_owner.source', 'vessels.0.corporate_entities.time_charterer.end_timestamp', 'vessels.0.corporate_entities.time_charterer.id', 'vessels.0.corporate_entities.time_charterer.label', 'vessels.0.corporate_entities.time_charterer.layer', 'vessels.0.corporate_entities.time_charterer.probability', 'vessels.0.corporate_entities.time_charterer.source', 'vessels.0.corporate_entities.time_charterer.start_timestamp', 'vessels.0.cubic_capacity', 'vessels.0.dwt', 'vessels.0.end_timestamp', 'vessels.0.fixture_fulfilled', 'vessels.0.fixture_id', 'vessels.0.id', 'vessels.0.imo', 'vessels.0.mmsi', 'vessels.0.name', 'vessels.0.start_timestamp', 'vessels.0.status', 'vessels.0.tags.0.end_timestamp', 'vessels.0.tags.0.start_timestamp', 'vessels.0.tags.0.tag', 'vessels.0.vessel_class', 'vessels.0.voyage_id', 'vessels.1.corporate_entities.charterer.id', 'vessels.1.corporate_entities.charterer.label', 'vessels.1.corporate_entities.charterer.layer', 'vessels.1.corporate_entities.charterer.probability', 'vessels.1.corporate_entities.charterer.source', 'vessels.1.corporate_entities.commercial_owner.id', 'vessels.1.corporate_entities.commercial_owner.label', 'vessels.1.corporate_entities.commercial_owner.layer', 'vessels.1.corporate_entities.commercial_owner.probability', 'vessels.1.corporate_entities.commercial_owner.source', 'vessels.1.corporate_entities.time_charterer.end_timestamp', 'vessels.1.corporate_entities.time_charterer.id', 'vessels.1.corporate_entities.time_charterer.label', 'vessels.1.corporate_entities.time_charterer.layer', 'vessels.1.corporate_entities.time_charterer.probability', 'vessels.1.corporate_entities.time_charterer.source', 'vessels.1.corporate_entities.time_charterer.start_timestamp', 'vessels.1.cubic_capacity', 'vessels.1.dwt', 'vessels.1.end_timestamp', 'vessels.1.fixture_fulfilled', 'vessels.1.id', 'vessels.1.imo', 'vessels.1.mmsi', 'vessels.1.name', 'vessels.1.start_timestamp', 'vessels.1.status', 'vessels.1.tags.0.end_timestamp', 'vessels.1.tags.0.start_timestamp', 'vessels.1.tags.0.tag', 'vessels.1.vessel_class', 'vessels.1.voyage_id', 'vessels.2.corporate_entities.charterer.id', 'vessels.2.corporate_entities.charterer.label', 'vessels.2.corporate_entities.charterer.layer', 'vessels.2.corporate_entities.charterer.probability', 'vessels.2.corporate_entities.charterer.source', 'vessels.2.corporate_entities.commercial_owner.id', 'vessels.2.corporate_entities.commercial_owner.label', 'vessels.2.corporate_entities.commercial_owner.layer', 'vessels.2.corporate_entities.commercial_owner.probability', 'vessels.2.corporate_entities.commercial_owner.source', 'vessels.2.corporate_entities.time_charterer.end_timestamp', 'vessels.2.corporate_entities.time_charterer.id', 'vessels.2.corporate_entities.time_charterer.label', 'vessels.2.corporate_entities.time_charterer.layer', 'vessels.2.corporate_entities.time_charterer.probability', 'vessels.2.corporate_entities.time_charterer.source', 'vessels.2.corporate_entities.time_charterer.start_timestamp', 'vessels.2.cubic_capacity', 'vessels.2.dwt', 'vessels.2.end_timestamp', 'vessels.2.id', 'vessels.2.imo', 'vessels.2.mmsi', 'vessels.2.name', 'vessels.2.start_timestamp', 'vessels.2.status', 'vessels.2.tags.0.start_timestamp', 'vessels.2.tags.0.tag', 'vessels.2.vessel_class', 'vessels.2.voyage_id', 'vessels.3.corporate_entities.commercial_owner.id', 'vessels.3.corporate_entities.commercial_owner.label', 'vessels.3.corporate_entities.commercial_owner.layer', 'vessels.3.corporate_entities.commercial_owner.probability', 'vessels.3.corporate_entities.commercial_owner.source', 'vessels.3.cubic_capacity', 'vessels.3.dwt', 'vessels.3.id', 'vessels.3.imo', 'vessels.3.mmsi', 'vessels.3.name', 'vessels.3.start_timestamp', 'vessels.3.status', 'vessels.3.vessel_class', 'vessels.3.voyage_id', ]","title":"Notes"},{"location":"endpoints/cargo_timeseries/","text":"vortexasdk.endpoints.cargo_timeseries Time Series Endpoint. CargoTimeSeries CargoTimeSeries(self) search CargoTimeSeries.search(self, filter_activity: str, timeseries_activity: str = None, timeseries_frequency: str = 'day', timeseries_unit: str = 'b', filter_time_min: datetime.datetime = datetime.datetime(2019, 10, 1, 0, 0), filter_time_max: datetime.datetime = datetime.datetime(2019, 10, 1, 1, 0), filter_charterers: Union[str, List[str]] = None, filter_destinations: Union[str, List[str]] = None, filter_origins: Union[str, List[str]] = None, filter_owners: Union[str, List[str]] = None, filter_products: Union[str, List[str]] = None, filter_vessels: Union[str, List[str]] = None, filter_storage_locations: Union[str, List[str]] = None, filter_ship_to_ship_locations: Union[str, List[str]] = None, filter_waypoints: Union[str, List[str]] = None, disable_geographic_exclusion_rules: bool = None, timeseries_activity_time_span_min: int = None, timeseries_activity_time_span_max: int = None) -> vortexasdk.endpoints.timeseries_result.TimeSeriesResult Find Aggregate flows between regions, for various products, for various vessels, or various corporations. Example questions that can be answered with this endpoint: How many Crude/Condensate barrels have been imported into China each day over the last year? How many tonnes of Fuel Oil has company X exported from the United States each week over the last 2 years? How have long-term Medium-Sour floating storage levels changed over time? Arguments filter_activity : Cargo movement activity on which to base the time filter. The endpoint only includes cargo movements matching that match this filter in the aggregations. Must be one of ['loading_state', 'loading_start', 'loading_end', 'identified_for_loading_state', 'unloading_state', 'unloading_start', 'unloading_end', 'storing_state', 'storing_start', 'storing_end', 'transiting_state']. filter_time_min : The UTC start date of the time filter. filter_time_max : The UTC end date of the time filter. filter_corporations : A corporation ID, or list of corporation IDs to filter on. filter_destinations : A geography ID, or list of geography IDs to filter on. filter_origins : A geography ID, or list of geography IDs to filter on. filter_owners : An owner ID, or list of owner IDs to filter on. filter_products : A product ID, or list of product IDs to filter on. filter_vessels : A vessel ID, or list of vessel IDs to filter on. filter_storage_locations : A geography ID, or list of geography IDs to filter on. filter_ship_to_ship_locations : A geography ID, or list of geography IDs to filter on. filter_waypoints : A geography ID, or list of geography IDs to filter on. disable_geographic_exclusion_rules : This controls a popular industry term \"intra-movements\" and determines the filter behaviour for cargo leaving then entering the same geographic area. timeseries_activity : The cargo movement activity we want to aggregate on. This param defaults to filter_activity if left blank. For example, Let's say we want to aggregate the unloading timestamps of all cargo movements that loaded in 2019, then we'd use filter_time_min and filter_time_max to specify 1st Jan 2019 and 31st Dec 2019 respectively, we'd set filter_activity='loading_state' and timeseries_activity='unloading_state' to filter on loadings but aggregate on unloadings. filter_activity Must be one of ['loading_state', 'loading_start', 'loading_end', 'identified_for_loading_state', 'unloading_state', 'unloading_start', 'unloading_end', 'storing_state', 'storing_start', 'storing_end', 'transiting_state']. timeseries_frequency : Frequency denoting the granularity of the time series. Must be one of ['day', 'week', 'doe_week', 'month', 'quarter', 'year'] timeseries_unit : A numeric metric to be calculated for each time bucket. Must be one of ['b', 'bpd', 't', 'tpd', 'c', 'cpd'], corresponding to barrels, barrels per day, metric tonnes, metric tonnes per day, cargo movement count, cargo movement count per day, respectively. timeseries_activity_time_span_min : The minimum amount of time in milliseconds accounted for in a time series activity. Can be used to request long-term floating storage. For example, to only return floating storage movements that occurred for more than 14 days enter timeseries_activity_time_span_min=1000 * 60 * 60 * 24 * 14 in conjunction with filter_activity='storing_state' . timeseries_activity_time_span_max : The maximum amount of time in milliseconds accounted for in a time series activity. Can be used to request short-term floating storage. For example, to only return floating storage movements that occurred for less than 14 days enter timeseries_activity_time_span_max=1000 * 60 * 60 * 24 * 14 in conjunction with filter_activity='storing_state' . Returns TimeSeriesResult Example What was the monthly average barrels per day of crude loaded from Rotterdam over the last year? >>> from vortexasdk import CargoTimeSeries, Geographies, Products >>> rotterdam = [g.id for g in Geographies().search(\"rotterdam\").to_list() if \"port\" in g.layer] >>> crude = [p.id for p in Products().search(\"crude\").to_list() if \"Crude\" == p.name] >>> search_result = CargoTimeSeries().search( ... timeseries_unit='bpd', ... timeseries_frequency='month', ... filter_origins=rotterdam, ... filter_products=crude, ... filter_activity='loading_state', ... filter_time_min=datetime(2018, 1, 1), ... filter_time_max=datetime(2018, 12, 31)) >>> df = search_result.to_df() Gives the following: key count value 0 2018-01-01T00:00:00.000Z 0.354839 458665 1 2018-02-01T00:00:00.000Z 0.75 45024 2 2018-03-01T00:00:00.000Z 0.0645161 35663.5 3 2018-04-01T00:00:00.000Z 0.878777 12345.2 4 2018-05-01T00:00:00.000Z 0.455932 9999.32 5 2018-06-01T00:00:00.000Z 0.777667 12234.8 6 2018-07-01T00:00:00.000Z 0.555097 987666 7 2018-08-01T00:00:00.000Z 0.290323 5318008.1 8 2018-09-01T00:00:00.000Z 0.0333333 686888.87 9 2018-10-01T00:00:00.000Z 0.354839 234344 10 2018-11-01T00:00:00.000Z 0.2345 111111 11 2018-12-01T00:00:00.000Z 0.123129 34344.5 vortexasdk.endpoints.timeseries_result TimeSeriesResult TimeSeriesResult(self, _records: List) -> None Container class that holds the result obtained from calling a time series endpoint. to_list TimeSeriesResult.to_list(self) -> List[vortexasdk.api.timeseries_item.TimeSeriesItem] Represents time series as a list. to_df TimeSeriesResult.to_df(self, columns=None) -> pandas.core.frame.DataFrame Represents the timeseries as a dataframe. Returns a pd.DataFrame , of time series items with columns: key: The time series key value: The value of the time series for a given key count: The number of records contributing to this time series record. Example: If we're aggregating Crude exports in tonnes by day, then the key column holds the date, the value column holds the Crude exports on that day, and the count column holds the number of cargo movements contributing towards this day's tonnage.","title":"Cargo Time Series"},{"location":"endpoints/corporations/","text":"vortexasdk.endpoints.corporations Corporations Endpoint. Corporations Corporations(self) Corporations Endpoint. load_all Corporations.load_all(self) -> vortexasdk.endpoints.corporations_result.CorporationsResult Load all corporations. search Corporations.search(self, term: Union[str, List[str]] = None) -> vortexasdk.endpoints.corporations_result.CorporationsResult Find all Corporations matching given search terms. Arguments term : The corporation name(s) we're filtering on Returns List of corporation matching term Examples Let's load all corporations >>> from vortexasdk import Corporations >>> df = Corporations().search().to_df() returns id name corporate_entity_type 0 04f418ee78c1e17744ad653e7815e8e28891ed9ba25a8427030e4478e5c00974 3J ['commercial_owner'] 1 b6384cf17f1639a64bbff04cfd32257bf732a3a13e4b0532802a9ae84a36be34 5XJAPANESE ['commercial_owner'] Let's find all corporations with 'do' in the name. >>> [x.name for x in Corporations().search(term=\"do\").to_list()] [...] Further Documentation VortexaAPI Corporation Reference reference Corporations.reference(self, id: str) -> Dict Perform a corporation lookup. Arguments id : Corporation ID to lookup Returns Corporation record matching the ID Further Documentation: VortexaAPI Corporation Reference Examples Corporations().reference(id='12345abcdef') # doctest: +SKIP vortexasdk.endpoints.corporations_result CorporationsResult CorporationsResult(self, _records: List) -> None Container class that holds the result obtained from calling the Vessels endpoint. to_list CorporationsResult.to_list(self) -> List[vortexasdk.api.corporation.Corporation] Represent vessels as a list. to_df CorporationsResult.to_df(self, columns=None) -> pandas.core.frame.DataFrame Represent corporations as a pd.DataFrame . Arguments columns : The corporation features we want in the dataframe. Enter columns='all' to include all features. Defaults to columns = ['id', 'name', 'corporate_entity_type'] . Returns pd.DataFrame of corporations.","title":"Corporations"},{"location":"endpoints/geographies/","text":"vortexasdk.endpoints.geographies Geographies Endpoint. Geographies Geographies(self) Geographies endpoint. load_all Geographies.load_all(self) -> vortexasdk.endpoints.geographies_result.GeographyResult Load all geographies. search Geographies.search(self, term: Union[str, List[str]] = None) -> vortexasdk.endpoints.geographies_result.GeographyResult Find all geographies matching given search terms. Arguments term : The geography name (or names) we're filtering on Returns List of geographies matching term Examples Find all geographies with portsmouth in the name. >>> from vortexasdk import Geographies >>> [x.name for x in Geographies().search(term=\"portsmouth\").to_list()] ['Portsmouth [GB]', 'Portsmouth, NH [US]'] Search multiple geography terms >>> df = Geographies().search(term=[\"Liverpool\", \"Southampton\"]).to_df() returns id name layer 0 b63d8f625669fd... Liverpool [GB] ['port'] 1 0cb7d4566de0f2... Southampton [GB] ['port'] 2 8b4273e3181f2d... Liverpool Docks ['terminal'] 3 98c50b0d2ee2b1... Liverpool Bulk Liquids ['terminal'] reference Geographies.reference(self, id: str) -> Dict Perform a geography lookup. Arguments id : Geography ID to lookup Returns Geography matching the ID Further Documentation: VortexaAPI Geography Reference vortexasdk.endpoints.geographies_result GeographyResult GeographyResult(self, _records: List) -> None Container class that holds the result obtained from calling the Geography endpoint. to_list GeographyResult.to_list(self) -> List[vortexasdk.api.geography.Geography] Represent geographies as a list. to_df GeographyResult.to_df(self, columns=None) -> pandas.core.frame.DataFrame Represent geographies as a pd.DataFrame . Arguments columns : The geography features we want in the dataframe. Enter columns='all' to include all features. Defaults to columns = ['id', 'name', 'layer'] . Returns pd.DataFrame of geographies.","title":"Geographies"},{"location":"endpoints/products/","text":"vortexasdk.endpoints.products Products Endpoint. Products Products(self) Vessels endpoint. load_all Products.load_all(self) -> vortexasdk.endpoints.products_result.ProductResult Load all products. search Products.search(self, term: Union[str, List[str]] = None, ids: Union[str, List[str]] = None, product_parent: Union[str, List[str]] = None) -> vortexasdk.endpoints.products_result.ProductResult Find all products matching given search terms. Arguments term : The name(s) (or partial name(s)) of a product we'd like to search ids : ID or IDs of products we'd like to search product_parent : ID, or list of IDs of the immediate product parent. E.g. product_parent ='12345' will return all children of product 12345 . Returns List of products matching the search arguments. Examples Let's look for products with in one of ['diesel', 'fuel oil', 'grane'] their name, or related names. >>> from vortexasdk import Products >>> df = Products().search(term=['diesel', 'fuel oil', 'grane']).to_df('all') Returns id name layer.0 leaf parent.0.name parent.0.layer.0 parent.0.id meta.api_min meta.api_max ref_type meta.sulphur_min meta.sulphur_max 0 1c107b4317bc2c8... Fuel Oil category False Dirty products product 5de0b00094e0fd... 12.8878 12.8878 product nan nan 1 fddedd17e02507f... Grane grade True Medium-Sour subproduct_group a7e26956fbb917... 29.2955 29.2955 product 0.62 0.62 2 deda35eb9ca56b5... Diesel/Gasoil category False Clean products product b68cbb7746f8b9... 35.9556 35.9556 product nan nan Further Documentation VortexaAPI Product Reference reference Products.reference(self, id: str) -> Dict Perform a product lookup. Arguments id : Product ID to lookup Returns Product record matching the ID Further Documentation: VortexaAPI Product Reference vortexasdk.endpoints.products_result ProductResult ProductResult(self, _records: List) -> None Container class that holds the result obtained from calling the Product endpoint. to_list ProductResult.to_list(self) -> List[vortexasdk.api.product.Product] Represent products as a list. to_df ProductResult.to_df(self, columns=None) -> pandas.core.frame.DataFrame Represent products as a pd.DataFrame . Arguments columns : The product features we want in the dataframe. Enter columns='all' to include all features. Defaults to columns = ['id', 'name', 'layer.0', 'parent.0.name'] . Returns pd.DataFrame of products.","title":"Products"},{"location":"endpoints/vessel_movements/","text":"vortexasdk.endpoints.vessel_movements Vessel Movements Endpoint. VesselMovements VesselMovements(self) Vessel Movements Endpoint, use this to search through Vortexa's VesselMovements. A VesselMovement represents a single vessel moving between two locations. The vessel may carry one cargo, many cargoes (coloads), or zero cargos (ballast). The start and end locations for a VesselMovement may be on land (loadings and discharges), they may be STS Zones (STS events), or they may be Floating Storage. A detailed explanation of Cargo/Vessel Movements can be found here . search VesselMovements.search(self, filter_time_min: datetime.datetime = datetime.datetime(2019, 10, 1, 0, 0), filter_time_max: datetime.datetime = datetime.datetime(2019, 10, 1, 1, 0), unit: str = 'b', filter_charterers: Union[str, List[str]] = None, filter_destinations: Union[str, List[str]] = None, filter_origins: Union[str, List[str]] = None, filter_owners: Union[str, List[str]] = None, filter_products: Union[str, List[str]] = None, filter_vessels: Union[str, List[str]] = None, filter_vessel_classes: Union[str, List[str]] = None, filter_vessel_status: str = None) -> vortexasdk.endpoints.vessel_movements_result.VesselMovementsResult Find VesselMovements matching the given search parameters. Arguments filter_time_min : The UTC start date of the time filter. filter_time_max : The UTC end date of the time filter. unit : Unit of measurement. Enter 'b' for barrels or 't' for tonnes. filter_corporations : A corporation ID, or list of corporation IDs to filter on. filter_destinations : A geography ID, or list of geography IDs to filter on. filter_origins : A geography ID, or list of geography IDs to filter on. filter_owners : An corporation ID, or list of corporation IDs to filter on. filter_products : A product ID, or list of product IDs to filter on. filter_vessels : A vessel ID, or list of vessel IDs to filter on. filter_vessel_classes : A vessel class, or list of vessel classes to filter on. filter_vessel_status : The vessel status on which to base the filter. Enter 'vessel_status_ballast' for ballast vessels, 'vessel_status_laden_known' for laden vessels with known cargo (i.e. a type of cargo that Vortexa currently tracks) or 'vessel_status_laden_unknown' for laden vessels with unknown cargo (i.e. a type of cargo that Vortexa currently does not track). Returns VesselMovementsResult , containing all the vessel movements matching the given search terms. Example Let's search for all vessels that departed from Rotterdam [NL] on the morning of 1st December 2018. >>> from vortexasdk import VesselMovements, Geographies >>> rotterdam = [g.id for g in Geographies().search(\"rotterdam\").to_list() if \"port\" in g.layer] >>> df = VesselMovements().search( ... filter_time_min=datetime(2017, 10, 1, 0, 0), ... filter_time_max=datetime(2017, 10, 1, 0, 10), ... filter_origins=rotterdam ... ).to_df().head(2) start_timestamp end_timestamp vessel.imo vessel.name vessel.vessel_class origin.location.country.label origin.location.port.label destination.location.country.label destination.location.port.label cargoes.0.quantity cargoes.0.product.grade.label 0 2017-09-30T15:30:27+0000 2017-10-03T01:46:06+0000 9.21091e+06 ADEBOMI 3 handysize Netherlands Rotterdam [NL] Netherlands Rotterdam [NL] nan nan 1 2017-08-29T14:51:32+0000 2017-10-04T14:46:21+0000 9.64544e+06 AEGEAN VISION suezmax Netherlands Rotterdam [NL] Singapore Singapore [SG] 852261 High Sulphur Vessel Movements Endpoint Further Documentation vortexasdk.endpoints.vessel_movements_result VesselMovementsResult VesselMovementsResult(self, _records: List) -> None Container class holdings search results returns from the vessel movements endpoint. This class has two methods, to_list() , and to_df() , allowing search results to be represented as a list of VesselMovement s, or as a pd.DataFrame , respectively. to_list VesselMovementsResult.to_list(self) -> List[vortexasdk.api.vessel_movement.VesselMovement] Represent vessel movements as a list of VesselMovementEntity s. to_df VesselMovementsResult.to_df(self, columns=None) -> pandas.core.frame.DataFrame Represent vessel movements as a pd.DataFrame . Arguments columns : Output columns present in the pd.DataFrame . Enter columns='all' to return all available columns. Enter columns=None to use vessel_movements.DEFAULT_COLUMNS . Returns pd.DataFrame , one row per VesselMovement . Notes By default, the columns returned are something along the lines of. DEFAULT_COLUMNS = [ 'vessel.imo', 'vessel.name', 'vessel.vessel_class', 'origin.event_type', 'origin.location.port.label', 'origin.location.country.label', 'destination.event_type', 'destination.location.port.label', 'destination.location.country.label', 'cargoes.0.product.group_product.label,' 'cargoes.0.product.category.label', 'cargoes.0.product.grade.label', 'cargoes.0.quantity', 'start_timestamp', 'end_timestamp', ] The exact default columns used can be found at vessel_movements.DEFAULT_COLUMNS A near complete list of columns is given below [ cargoes.0.cargo_movement_id cargoes.0.product.category.id cargoes.0.product.category.label cargoes.0.product.category.layer cargoes.0.product.category.probability cargoes.0.product.category.source cargoes.0.product.grade.id cargoes.0.product.grade.label cargoes.0.product.grade.layer cargoes.0.product.grade.probability cargoes.0.product.grade.source cargoes.0.product.group.id cargoes.0.product.group.label cargoes.0.product.group.layer cargoes.0.product.group.probability cargoes.0.product.group.source cargoes.0.product.group_product.id cargoes.0.product.group_product.label cargoes.0.product.group_product.layer cargoes.0.product.group_product.probability cargoes.0.product.group_product.source cargoes.0.quantity cargoes.1.cargo_movement_id cargoes.1.product.category.id cargoes.1.product.category.label cargoes.1.product.category.layer cargoes.1.product.category.probability cargoes.1.product.category.source cargoes.1.product.grade.id cargoes.1.product.grade.label cargoes.1.product.grade.layer cargoes.1.product.grade.probability cargoes.1.product.grade.source cargoes.1.product.group.id cargoes.1.product.group.label cargoes.1.product.group.layer cargoes.1.product.group.probability cargoes.1.product.group.source cargoes.1.product.group_product.id cargoes.1.product.group_product.label cargoes.1.product.group_product.layer cargoes.1.product.group_product.probability cargoes.1.product.group_product.source cargoes.1.quantity cargoes.2.cargo_movement_id cargoes.2.product.category.id cargoes.2.product.category.label cargoes.2.product.category.layer cargoes.2.product.category.probability cargoes.2.product.category.source cargoes.2.product.grade.id cargoes.2.product.grade.label cargoes.2.product.grade.layer cargoes.2.product.grade.probability cargoes.2.product.grade.source cargoes.2.product.group.id cargoes.2.product.group.label cargoes.2.product.group.layer cargoes.2.product.group.probability cargoes.2.product.group.source cargoes.2.product.group_product.id cargoes.2.product.group_product.label cargoes.2.product.group_product.layer cargoes.2.product.group_product.probability cargoes.2.product.group_product.source cargoes.2.quantity cargoes.3.cargo_movement_id cargoes.3.product.category.id cargoes.3.product.category.label cargoes.3.product.category.layer cargoes.3.product.category.probability cargoes.3.product.category.source cargoes.3.product.grade.id cargoes.3.product.grade.label cargoes.3.product.grade.layer cargoes.3.product.grade.probability cargoes.3.product.grade.source cargoes.3.product.group.id cargoes.3.product.group.label cargoes.3.product.group.layer cargoes.3.product.group.probability cargoes.3.product.group.source cargoes.3.product.group_product.id cargoes.3.product.group_product.label cargoes.3.product.group_product.layer cargoes.3.product.group_product.probability cargoes.3.product.group_product.source cargoes.3.quantity cargoes.4.cargo_movement_id cargoes.4.product.category.id cargoes.4.product.category.label cargoes.4.product.category.layer cargoes.4.product.category.probability cargoes.4.product.category.source cargoes.4.product.grade.id cargoes.4.product.grade.label cargoes.4.product.grade.layer cargoes.4.product.grade.probability cargoes.4.product.grade.source cargoes.4.product.group.id cargoes.4.product.group.label cargoes.4.product.group.layer cargoes.4.product.group.probability cargoes.4.product.group.source cargoes.4.product.group_product.id cargoes.4.product.group_product.label cargoes.4.product.group_product.layer cargoes.4.product.group_product.probability cargoes.4.product.group_product.source cargoes.4.quantity cargoes.5.cargo_movement_id cargoes.5.product.category.id cargoes.5.product.category.label cargoes.5.product.category.layer cargoes.5.product.category.probability cargoes.5.product.category.source cargoes.5.product.grade.id cargoes.5.product.grade.label cargoes.5.product.grade.layer cargoes.5.product.grade.probability cargoes.5.product.grade.source cargoes.5.product.group.id cargoes.5.product.group.label cargoes.5.product.group.layer cargoes.5.product.group.probability cargoes.5.product.group.source cargoes.5.product.group_product.id cargoes.5.product.group_product.label cargoes.5.product.group_product.layer cargoes.5.product.group_product.probability cargoes.5.product.group_product.source cargoes.5.quantity cargoes.6.cargo_movement_id cargoes.6.product.category.id cargoes.6.product.category.label cargoes.6.product.category.layer cargoes.6.product.category.probability cargoes.6.product.category.source cargoes.6.product.grade.id cargoes.6.product.grade.label cargoes.6.product.grade.layer cargoes.6.product.grade.probability cargoes.6.product.grade.source cargoes.6.product.group.id cargoes.6.product.group.label cargoes.6.product.group.layer cargoes.6.product.group.probability cargoes.6.product.group.source cargoes.6.product.group_product.id cargoes.6.product.group_product.label cargoes.6.product.group_product.layer cargoes.6.product.group_product.probability cargoes.6.product.group_product.source cargoes.6.quantity cargoes.7.cargo_movement_id cargoes.7.product.category.id cargoes.7.product.category.label cargoes.7.product.category.layer cargoes.7.product.category.probability cargoes.7.product.category.source cargoes.7.product.grade.id cargoes.7.product.grade.label cargoes.7.product.grade.layer cargoes.7.product.grade.probability cargoes.7.product.grade.source cargoes.7.product.group.id cargoes.7.product.group.label cargoes.7.product.group.layer cargoes.7.product.group.probability cargoes.7.product.group.source cargoes.7.product.group_product.id cargoes.7.product.group_product.label cargoes.7.product.group_product.layer cargoes.7.product.group_product.probability cargoes.7.product.group_product.source cargoes.7.quantity cargoes.8.cargo_movement_id cargoes.8.product.category.id cargoes.8.product.category.label cargoes.8.product.category.layer cargoes.8.product.category.probability cargoes.8.product.category.source cargoes.8.product.grade.id cargoes.8.product.grade.label cargoes.8.product.grade.layer cargoes.8.product.grade.probability cargoes.8.product.grade.source cargoes.8.product.group.id cargoes.8.product.group.label cargoes.8.product.group.layer cargoes.8.product.group.probability cargoes.8.product.group.source cargoes.8.product.group_product.id cargoes.8.product.group_product.label cargoes.8.product.group_product.layer cargoes.8.product.group_product.probability cargoes.8.product.group_product.source cargoes.8.quantity cargoes.9.cargo_movement_id cargoes.9.product.category.id cargoes.9.product.category.label cargoes.9.product.category.layer cargoes.9.product.category.probability cargoes.9.product.category.source cargoes.9.product.grade.id cargoes.9.product.grade.label cargoes.9.product.grade.layer cargoes.9.product.grade.probability cargoes.9.product.grade.source cargoes.9.product.group.id cargoes.9.product.group.label cargoes.9.product.group.layer cargoes.9.product.group.probability cargoes.9.product.group.source cargoes.9.product.group_product.id cargoes.9.product.group_product.label cargoes.9.product.group_product.layer cargoes.9.product.group_product.probability cargoes.9.product.group_product.source cargoes.9.quantity destination.end_timestamp destination.event_id destination.event_type destination.from_vessel.id destination.from_vessel.label destination.from_vessel.tags.0 destination.from_vessel.tags.1 destination.location.country.id destination.location.country.label destination.location.country.layer destination.location.country.probability destination.location.country.source destination.location.port.id destination.location.port.label destination.location.port.layer destination.location.port.probability destination.location.port.source destination.location.region.id destination.location.region.label destination.location.region.layer destination.location.region.probability destination.location.region.source destination.location.shipping_region.id destination.location.shipping_region.label destination.location.shipping_region.layer destination.location.shipping_region.probability destination.location.shipping_region.source destination.location.sts_zone.id destination.location.sts_zone.label destination.location.sts_zone.layer destination.location.sts_zone.probability destination.location.sts_zone.source destination.location.terminal.id destination.location.terminal.label destination.location.terminal.layer destination.location.terminal.probability destination.location.terminal.source destination.location.trading_block.id destination.location.trading_block.label destination.location.trading_block.layer destination.location.trading_block.probability destination.location.trading_block.source destination.location.trading_region.id destination.location.trading_region.label destination.location.trading_region.layer destination.location.trading_region.probability destination.location.trading_region.source destination.location.trading_subregion.id destination.location.trading_subregion.label destination.location.trading_subregion.layer destination.location.trading_subregion.probability destination.location.trading_subregion.source destination.pos.0 destination.pos.1 destination.start_timestamp destination.to_vessel.id destination.to_vessel.label destination.to_vessel.tags.0 destination.to_vessel.tags.1 destination.to_vessel.tags.2 destination.to_vessel.tags.3 destination.to_vessel.tags.4 destination.to_vessel.tags.5 destination.to_vessel.tags.6 destination.to_vessel.tags.7 destination.to_vessel.tags.8 destination.to_vessel.tags.9 end_timestamp origin.end_timestamp origin.event_id origin.event_type origin.from_vessel.id origin.from_vessel.label origin.from_vessel.tags.0 origin.from_vessel.tags.1 origin.from_vessel.tags.2 origin.from_vessel.tags.3 origin.from_vessel.tags.4 origin.from_vessel.tags.5 origin.location.country.id origin.location.country.label origin.location.country.layer origin.location.country.probability origin.location.country.source origin.location.port.id origin.location.port.label origin.location.port.layer origin.location.port.probability origin.location.port.source origin.location.region.id origin.location.region.label origin.location.region.layer origin.location.region.probability origin.location.region.source origin.location.shipping_region.id origin.location.shipping_region.label origin.location.shipping_region.layer origin.location.shipping_region.probability origin.location.shipping_region.source origin.location.sts_zone.id origin.location.sts_zone.label origin.location.sts_zone.layer origin.location.sts_zone.probability origin.location.sts_zone.source origin.location.terminal.id origin.location.terminal.label origin.location.terminal.layer origin.location.terminal.probability origin.location.terminal.source origin.location.trading_block.id origin.location.trading_block.label origin.location.trading_block.layer origin.location.trading_block.probability origin.location.trading_block.source origin.location.trading_region.id origin.location.trading_region.label origin.location.trading_region.layer origin.location.trading_region.probability origin.location.trading_region.source origin.location.trading_subregion.id origin.location.trading_subregion.label origin.location.trading_subregion.layer origin.location.trading_subregion.probability origin.location.trading_subregion.source origin.pos.0 origin.pos.1 origin.start_timestamp origin.to_vessel.id origin.to_vessel.label origin.to_vessel.tags.0 origin.to_vessel.tags.1 origin.to_vessel.tags.2 origin.to_vessel.tags.3 start_timestamp vessel.corporate_entities.charterer.id vessel.corporate_entities.charterer.label vessel.corporate_entities.charterer.layer vessel.corporate_entities.charterer.probability vessel.corporate_entities.charterer.source vessel.corporate_entities.commercial_owner.id vessel.corporate_entities.commercial_owner.label vessel.corporate_entities.commercial_owner.layer vessel.corporate_entities.commercial_owner.probability vessel.corporate_entities.commercial_owner.source vessel.corporate_entities.time_charterer.end_timestamp vessel.corporate_entities.time_charterer.id vessel.corporate_entities.time_charterer.label vessel.corporate_entities.time_charterer.layer vessel.corporate_entities.time_charterer.probability vessel.corporate_entities.time_charterer.source vessel.corporate_entities.time_charterer.start_timestamp vessel.cubic_capacity vessel.dwt vessel.id vessel.imo vessel.mmsi vessel.name vessel.status vessel.tags.0.end_timestamp vessel.tags.0.start_timestamp vessel.tags.0.tag vessel.tags.1.end_timestamp vessel.tags.1.start_timestamp vessel.tags.1.tag vessel.tags.2.end_timestamp vessel.tags.2.start_timestamp vessel.tags.2.tag vessel.tags.3.end_timestamp vessel.tags.3.start_timestamp vessel.tags.3.tag vessel.tags.4.end_timestamp vessel.tags.4.start_timestamp vessel.tags.4.tag vessel.vessel_class vessel_movement_id voyage_id ]","title":"Vessel Movements"},{"location":"endpoints/vessel_movements/#notes","text":"By default, the columns returned are something along the lines of. DEFAULT_COLUMNS = [ 'vessel.imo', 'vessel.name', 'vessel.vessel_class', 'origin.event_type', 'origin.location.port.label', 'origin.location.country.label', 'destination.event_type', 'destination.location.port.label', 'destination.location.country.label', 'cargoes.0.product.group_product.label,' 'cargoes.0.product.category.label', 'cargoes.0.product.grade.label', 'cargoes.0.quantity', 'start_timestamp', 'end_timestamp', ] The exact default columns used can be found at vessel_movements.DEFAULT_COLUMNS A near complete list of columns is given below [ cargoes.0.cargo_movement_id cargoes.0.product.category.id cargoes.0.product.category.label cargoes.0.product.category.layer cargoes.0.product.category.probability cargoes.0.product.category.source cargoes.0.product.grade.id cargoes.0.product.grade.label cargoes.0.product.grade.layer cargoes.0.product.grade.probability cargoes.0.product.grade.source cargoes.0.product.group.id cargoes.0.product.group.label cargoes.0.product.group.layer cargoes.0.product.group.probability cargoes.0.product.group.source cargoes.0.product.group_product.id cargoes.0.product.group_product.label cargoes.0.product.group_product.layer cargoes.0.product.group_product.probability cargoes.0.product.group_product.source cargoes.0.quantity cargoes.1.cargo_movement_id cargoes.1.product.category.id cargoes.1.product.category.label cargoes.1.product.category.layer cargoes.1.product.category.probability cargoes.1.product.category.source cargoes.1.product.grade.id cargoes.1.product.grade.label cargoes.1.product.grade.layer cargoes.1.product.grade.probability cargoes.1.product.grade.source cargoes.1.product.group.id cargoes.1.product.group.label cargoes.1.product.group.layer cargoes.1.product.group.probability cargoes.1.product.group.source cargoes.1.product.group_product.id cargoes.1.product.group_product.label cargoes.1.product.group_product.layer cargoes.1.product.group_product.probability cargoes.1.product.group_product.source cargoes.1.quantity cargoes.2.cargo_movement_id cargoes.2.product.category.id cargoes.2.product.category.label cargoes.2.product.category.layer cargoes.2.product.category.probability cargoes.2.product.category.source cargoes.2.product.grade.id cargoes.2.product.grade.label cargoes.2.product.grade.layer cargoes.2.product.grade.probability cargoes.2.product.grade.source cargoes.2.product.group.id cargoes.2.product.group.label cargoes.2.product.group.layer cargoes.2.product.group.probability cargoes.2.product.group.source cargoes.2.product.group_product.id cargoes.2.product.group_product.label cargoes.2.product.group_product.layer cargoes.2.product.group_product.probability cargoes.2.product.group_product.source cargoes.2.quantity cargoes.3.cargo_movement_id cargoes.3.product.category.id cargoes.3.product.category.label cargoes.3.product.category.layer cargoes.3.product.category.probability cargoes.3.product.category.source cargoes.3.product.grade.id cargoes.3.product.grade.label cargoes.3.product.grade.layer cargoes.3.product.grade.probability cargoes.3.product.grade.source cargoes.3.product.group.id cargoes.3.product.group.label cargoes.3.product.group.layer cargoes.3.product.group.probability cargoes.3.product.group.source cargoes.3.product.group_product.id cargoes.3.product.group_product.label cargoes.3.product.group_product.layer cargoes.3.product.group_product.probability cargoes.3.product.group_product.source cargoes.3.quantity cargoes.4.cargo_movement_id cargoes.4.product.category.id cargoes.4.product.category.label cargoes.4.product.category.layer cargoes.4.product.category.probability cargoes.4.product.category.source cargoes.4.product.grade.id cargoes.4.product.grade.label cargoes.4.product.grade.layer cargoes.4.product.grade.probability cargoes.4.product.grade.source cargoes.4.product.group.id cargoes.4.product.group.label cargoes.4.product.group.layer cargoes.4.product.group.probability cargoes.4.product.group.source cargoes.4.product.group_product.id cargoes.4.product.group_product.label cargoes.4.product.group_product.layer cargoes.4.product.group_product.probability cargoes.4.product.group_product.source cargoes.4.quantity cargoes.5.cargo_movement_id cargoes.5.product.category.id cargoes.5.product.category.label cargoes.5.product.category.layer cargoes.5.product.category.probability cargoes.5.product.category.source cargoes.5.product.grade.id cargoes.5.product.grade.label cargoes.5.product.grade.layer cargoes.5.product.grade.probability cargoes.5.product.grade.source cargoes.5.product.group.id cargoes.5.product.group.label cargoes.5.product.group.layer cargoes.5.product.group.probability cargoes.5.product.group.source cargoes.5.product.group_product.id cargoes.5.product.group_product.label cargoes.5.product.group_product.layer cargoes.5.product.group_product.probability cargoes.5.product.group_product.source cargoes.5.quantity cargoes.6.cargo_movement_id cargoes.6.product.category.id cargoes.6.product.category.label cargoes.6.product.category.layer cargoes.6.product.category.probability cargoes.6.product.category.source cargoes.6.product.grade.id cargoes.6.product.grade.label cargoes.6.product.grade.layer cargoes.6.product.grade.probability cargoes.6.product.grade.source cargoes.6.product.group.id cargoes.6.product.group.label cargoes.6.product.group.layer cargoes.6.product.group.probability cargoes.6.product.group.source cargoes.6.product.group_product.id cargoes.6.product.group_product.label cargoes.6.product.group_product.layer cargoes.6.product.group_product.probability cargoes.6.product.group_product.source cargoes.6.quantity cargoes.7.cargo_movement_id cargoes.7.product.category.id cargoes.7.product.category.label cargoes.7.product.category.layer cargoes.7.product.category.probability cargoes.7.product.category.source cargoes.7.product.grade.id cargoes.7.product.grade.label cargoes.7.product.grade.layer cargoes.7.product.grade.probability cargoes.7.product.grade.source cargoes.7.product.group.id cargoes.7.product.group.label cargoes.7.product.group.layer cargoes.7.product.group.probability cargoes.7.product.group.source cargoes.7.product.group_product.id cargoes.7.product.group_product.label cargoes.7.product.group_product.layer cargoes.7.product.group_product.probability cargoes.7.product.group_product.source cargoes.7.quantity cargoes.8.cargo_movement_id cargoes.8.product.category.id cargoes.8.product.category.label cargoes.8.product.category.layer cargoes.8.product.category.probability cargoes.8.product.category.source cargoes.8.product.grade.id cargoes.8.product.grade.label cargoes.8.product.grade.layer cargoes.8.product.grade.probability cargoes.8.product.grade.source cargoes.8.product.group.id cargoes.8.product.group.label cargoes.8.product.group.layer cargoes.8.product.group.probability cargoes.8.product.group.source cargoes.8.product.group_product.id cargoes.8.product.group_product.label cargoes.8.product.group_product.layer cargoes.8.product.group_product.probability cargoes.8.product.group_product.source cargoes.8.quantity cargoes.9.cargo_movement_id cargoes.9.product.category.id cargoes.9.product.category.label cargoes.9.product.category.layer cargoes.9.product.category.probability cargoes.9.product.category.source cargoes.9.product.grade.id cargoes.9.product.grade.label cargoes.9.product.grade.layer cargoes.9.product.grade.probability cargoes.9.product.grade.source cargoes.9.product.group.id cargoes.9.product.group.label cargoes.9.product.group.layer cargoes.9.product.group.probability cargoes.9.product.group.source cargoes.9.product.group_product.id cargoes.9.product.group_product.label cargoes.9.product.group_product.layer cargoes.9.product.group_product.probability cargoes.9.product.group_product.source cargoes.9.quantity destination.end_timestamp destination.event_id destination.event_type destination.from_vessel.id destination.from_vessel.label destination.from_vessel.tags.0 destination.from_vessel.tags.1 destination.location.country.id destination.location.country.label destination.location.country.layer destination.location.country.probability destination.location.country.source destination.location.port.id destination.location.port.label destination.location.port.layer destination.location.port.probability destination.location.port.source destination.location.region.id destination.location.region.label destination.location.region.layer destination.location.region.probability destination.location.region.source destination.location.shipping_region.id destination.location.shipping_region.label destination.location.shipping_region.layer destination.location.shipping_region.probability destination.location.shipping_region.source destination.location.sts_zone.id destination.location.sts_zone.label destination.location.sts_zone.layer destination.location.sts_zone.probability destination.location.sts_zone.source destination.location.terminal.id destination.location.terminal.label destination.location.terminal.layer destination.location.terminal.probability destination.location.terminal.source destination.location.trading_block.id destination.location.trading_block.label destination.location.trading_block.layer destination.location.trading_block.probability destination.location.trading_block.source destination.location.trading_region.id destination.location.trading_region.label destination.location.trading_region.layer destination.location.trading_region.probability destination.location.trading_region.source destination.location.trading_subregion.id destination.location.trading_subregion.label destination.location.trading_subregion.layer destination.location.trading_subregion.probability destination.location.trading_subregion.source destination.pos.0 destination.pos.1 destination.start_timestamp destination.to_vessel.id destination.to_vessel.label destination.to_vessel.tags.0 destination.to_vessel.tags.1 destination.to_vessel.tags.2 destination.to_vessel.tags.3 destination.to_vessel.tags.4 destination.to_vessel.tags.5 destination.to_vessel.tags.6 destination.to_vessel.tags.7 destination.to_vessel.tags.8 destination.to_vessel.tags.9 end_timestamp origin.end_timestamp origin.event_id origin.event_type origin.from_vessel.id origin.from_vessel.label origin.from_vessel.tags.0 origin.from_vessel.tags.1 origin.from_vessel.tags.2 origin.from_vessel.tags.3 origin.from_vessel.tags.4 origin.from_vessel.tags.5 origin.location.country.id origin.location.country.label origin.location.country.layer origin.location.country.probability origin.location.country.source origin.location.port.id origin.location.port.label origin.location.port.layer origin.location.port.probability origin.location.port.source origin.location.region.id origin.location.region.label origin.location.region.layer origin.location.region.probability origin.location.region.source origin.location.shipping_region.id origin.location.shipping_region.label origin.location.shipping_region.layer origin.location.shipping_region.probability origin.location.shipping_region.source origin.location.sts_zone.id origin.location.sts_zone.label origin.location.sts_zone.layer origin.location.sts_zone.probability origin.location.sts_zone.source origin.location.terminal.id origin.location.terminal.label origin.location.terminal.layer origin.location.terminal.probability origin.location.terminal.source origin.location.trading_block.id origin.location.trading_block.label origin.location.trading_block.layer origin.location.trading_block.probability origin.location.trading_block.source origin.location.trading_region.id origin.location.trading_region.label origin.location.trading_region.layer origin.location.trading_region.probability origin.location.trading_region.source origin.location.trading_subregion.id origin.location.trading_subregion.label origin.location.trading_subregion.layer origin.location.trading_subregion.probability origin.location.trading_subregion.source origin.pos.0 origin.pos.1 origin.start_timestamp origin.to_vessel.id origin.to_vessel.label origin.to_vessel.tags.0 origin.to_vessel.tags.1 origin.to_vessel.tags.2 origin.to_vessel.tags.3 start_timestamp vessel.corporate_entities.charterer.id vessel.corporate_entities.charterer.label vessel.corporate_entities.charterer.layer vessel.corporate_entities.charterer.probability vessel.corporate_entities.charterer.source vessel.corporate_entities.commercial_owner.id vessel.corporate_entities.commercial_owner.label vessel.corporate_entities.commercial_owner.layer vessel.corporate_entities.commercial_owner.probability vessel.corporate_entities.commercial_owner.source vessel.corporate_entities.time_charterer.end_timestamp vessel.corporate_entities.time_charterer.id vessel.corporate_entities.time_charterer.label vessel.corporate_entities.time_charterer.layer vessel.corporate_entities.time_charterer.probability vessel.corporate_entities.time_charterer.source vessel.corporate_entities.time_charterer.start_timestamp vessel.cubic_capacity vessel.dwt vessel.id vessel.imo vessel.mmsi vessel.name vessel.status vessel.tags.0.end_timestamp vessel.tags.0.start_timestamp vessel.tags.0.tag vessel.tags.1.end_timestamp vessel.tags.1.start_timestamp vessel.tags.1.tag vessel.tags.2.end_timestamp vessel.tags.2.start_timestamp vessel.tags.2.tag vessel.tags.3.end_timestamp vessel.tags.3.start_timestamp vessel.tags.3.tag vessel.tags.4.end_timestamp vessel.tags.4.start_timestamp vessel.tags.4.tag vessel.vessel_class vessel_movement_id voyage_id ]","title":"Notes"},{"location":"endpoints/vessels/","text":"vortexasdk.endpoints.vessels Vessels Endpoint. Vessels Vessels(self) Vessels endpoint. load_all Vessels.load_all(self) -> vortexasdk.endpoints.vessels_result.VesselsResult Load all vessels. search Vessels.search(self, term: Union[str, List[str]] = None, ids: Union[str, List[str]] = None, vessel_classes: Union[str, List[str]] = None, vessel_product_types: Union[str, List[str]] = None) -> vortexasdk.endpoints.vessels_result.VesselsResult Find all vessels matching given search arguments. Search arguments are combined in an AND manner. Arguments term : The name(s) (or partial name(s)) of a vessel we'd like to search ids : ID or IDs of vessels we'd like to search vessel_classes : vessel_class (or list of vessel classes) we'd like to search. Each vessel class must be one of \"tiny_tanker\" , \"general_purpose\" , \"handysize\" , \"handymax\" , \"panamax\" , \"aframax\" , \"suezmax\" , \"vlcc_plus\" , \"sgc\" , \"mgc\" , \"lgc\" , \"vlgc\". Refer to VortexaAPI Vessel Entities for the most up-to-date list of vessel classes. vessel_product_types : A product ID, or list of product IDs to filter on, searching vessels currently carrying these products. Returns List of vessels matching the search arguments. Examples Let's find all the VLCCs with 'ocean' in their name, or related names. >>> from vortexasdk import Vessels >>> vessels_df = Vessels().search(vessel_classes='vlcc', term='ocean').to_df(columns=['name', 'imo', 'mmsi', 'related_names']) name imo mmsi related_names 0 OCEANIS 9532757 241089000 ['OCEANIS'] 1 AEGEAN 9732553 205761000 ['GENER8 OCEANUS'] 2 OCEANIA 9246633 205753000 ['OCEANIA' 3 ENEOS OCEAN 9662875 432986000 ['ENEOS OCEAN'] 4 OCEAN LILY 9284960 477178100 ['OCEAN LILY'] 5 SHINYO OCEAN 9197868 636019316 ['SHINYO OCEAN'] 6 NASHA 9079107 370497000 ['OCEANIC'] 7 HUMANITY 9180281 422204700 ['OCEAN NYMPH'] Note the term search also looks for vessels with matching related_names Let's find all the vessels currently carrying Crude. >>> from vortexasdk import Vessels, Products >>> crude = [p.id for p in Products().search(term=\"crude\").to_list() if 'group' in p.layer] >>> vessels_df = Vessels().search(vessel_product_types=crude).to_df() Further Documentation VortexaAPI Vessel Reference reference Vessels.reference(self, id: str) -> Dict Perform a vessel lookup. Arguments id : Vessel ID to lookup Returns Vessel record matching the ID Further Documentation: VortexaAPI Vessel Reference vortexasdk.endpoints.vessels_result VesselsResult VesselsResult(self, _records: List) -> None Container class that holds the result obtained from calling the Vessels endpoint. to_list VesselsResult.to_list(self) -> List[vortexasdk.api.vessel.Vessel] Represent vessels as a list. to_df VesselsResult.to_df(self, columns=None) -> pandas.core.frame.DataFrame Represent vessels as a pd.DataFrame . Arguments columns : The vessel features we want in the dataframe. Enter columns='all' to include all features. Defaults to columns = ['id', 'name', 'imo', 'vessel_class'] . Returns pd.DataFrame of vessels.","title":"Vessels"},{"location":"entities/cargo_movement/","text":"vortexasdk.api.cargo_movement CargoEvent CargoEvent(self, event_type: str, location: List[vortexasdk.api.geography.GeographyEntity], probability: Union[float, NoneType] = None, pos: Union[List[float], NoneType] = None, vessel_id: Union[str, NoneType] = None, start_timestamp: Union[str, NoneType] = None, end_timestamp: Union[str, NoneType] = None) -> None A CargoEvent represents an event that occurred to a cargo during a cargo movement. Cargo Event Entities Further Documentation CargoMovement CargoMovement(self, cargo_movement_id: str, quantity: int, status: str, vessels: List[vortexasdk.api.vessel.VesselEntity], product: List[vortexasdk.api.product.ProductEntity], events: List[vortexasdk.api.cargo_movement.CargoEvent]) -> None Cargo movements are the base data set the Vortexa API is centred around. Each movement represents a journey of a certain quantity of a product between places. Cargo Movement Further Documentation","title":"Cargo Movement"},{"location":"entities/corporation/","text":"vortexasdk.api.corporation Corporation Corporation(self, id: str, name: str, corporate_entity_type: List[str], ref_type: str, leaf: bool, parent: List[str]) -> None Represent a Corporation reference record returned by the API. CorporateEntity CorporateEntity(self, id: str, label: str, layer: str, probability: float, source: str) -> None Represents a relationship between a corporation and another entity like a vessel. Corporate Entity Further Documentation","title":"Corporation"},{"location":"entities/geography/","text":"vortexasdk.api.geography BoundingBox BoundingBox(self, type: str, coordinates: List[Tuple[float, float]]) -> None Polygon with list of bounding lon lat coords. Geography Geography(self, id: str, name: str, ref_type: str, leaf: bool, parent: List[vortexasdk.api.shared_types.IDNameLayer], layer: List[str], exclusion_rule: List[vortexasdk.api.shared_types.IDNameLayer], hierarchy: List[vortexasdk.api.shared_types.IDLayer], bounding_box: Union[vortexasdk.api.geography.BoundingBox, NoneType], centre_point: Union[Tuple[float, float], NoneType], location: Union[Tuple[float, float], NoneType]) -> None Represent a Geography reference record returned by the API. GeographyEntity GeographyEntity(self, id: str, label: str, layer: str, probability: float, source: str) -> None Represents a hierarchy tree of locational data. Geography Entities Further Documentation","title":"Geography"},{"location":"entities/product/","text":"vortexasdk.api.product Product Product(self, id: str, name: str, ref_type: str, leaf: bool, parent: List[vortexasdk.api.shared_types.IDNameLayer], layer: List[str], meta: dict, hierarchy: List[vortexasdk.api.shared_types.Entity]) -> None Represent a Product reference record returned by the API. Product Further Documentation ProductEntity ProductEntity(self, id: str, label: str, layer: str, probability: float, source: str) -> None Represents a single product layer of a hierarchical product tree. Further Documentation","title":"Product"},{"location":"entities/vessel/","text":"vortexasdk.api.vessel Vessel Vessel(self, id: str, name: str, ref_type: str, leaf: bool, parent: List[vortexasdk.api.shared_types.IDNameLayer], related_names: List[str], mmsi: int, tags: List[vortexasdk.api.shared_types.Tag], current_product_type: List, vessel_class: str, dead_weight: Union[int, NoneType] = None, cubic_capacity: Union[int, NoneType] = None, to_bow: Union[str, NoneType] = None, to_stern: Union[str, NoneType] = None, to_port: Union[str, NoneType] = None, to_starboard: Union[str, NoneType] = None, call_sign: Union[str, NoneType] = None, year: Union[int, NoneType] = None, imo: Union[int, NoneType] = None, gross_tonnage: Union[int, NoneType] = None) -> None Represent a Vessel reference record returned by the API. Vessels Further Documentation VesselEntity VesselEntity(self, id: str, name: str, mmsi: int, imo: Union[int, NoneType], dwt: int, vessel_class: str, corporate_entities: List[vortexasdk.api.corporation.CorporateEntity], tags: List[vortexasdk.api.shared_types.Tag], status: str, start_timestamp: Union[str, NoneType] = None, cubic_capacity: Union[int, NoneType] = None, voyage_id: Union[str, NoneType] = None, fixture_fulfilled: Union[bool, NoneType] = None, end_timestamp: Union[str, NoneType] = None, fixture_id: Union[str, NoneType] = None) -> None A VesselEntity represents a vessel record used in CargoMovements and VesselMovements. Vessel Entities Further Documentation","title":"Vessel"},{"location":"entities/vessel_movement/","text":"vortexasdk.api.vessel_movement VesselEvent VesselEvent(self, event_type: str, location: List[vortexasdk.api.geography.GeographyEntity], pos: Union[List[float], NoneType] = None, event_id: Union[str, NoneType] = None, start_timestamp: Union[str, NoneType] = None, end_timestamp: Union[str, NoneType] = None) -> None Represent an event that occurred to a vessel during a vessel movement. VesselMovement VesselMovement(self, vessel_movement_id: str, voyage_id: str, vessel: vortexasdk.api.vessel.VesselEntity, origin: vortexasdk.api.vessel_movement.VesselEvent, destination: vortexasdk.api.vessel_movement.VesselEvent, start_timestamp: Union[str, NoneType] = None, end_timestamp: Union[str, NoneType] = None) -> None What is a vessel movement. TODO. Vessel Movement Further Documentation","title":"Vessel Movement"},{"location":"examples/0_sample_load_cargo_movements/","text":"Simple example to retrieving some sample cargo movements in a dataframe. The below script returns something similar to: events.cargo_port_unload_event.0.start_timestamp product.group.label product.grade.label quantity vessels.0.name 0 2019-10-08T00:41:00+0000 Crude Djeno 123457 AROME 1 2019-11-08T00:41:52+0000 Crude Arab Medium 99898 SCOOBYDOO 2 2019-09-30T23:49:41+0000 Crude Arab Heavy 9879878 DAVID 3 2019-12-01T01:40:00+0000 Crude Usan 999999 DUCK from datetime import datetime from vortexasdk import CargoMovements if __name__ == \"__main__\": # Query API to find all vessels that were loading on the 1st of Aug 2019 search_result = CargoMovements().search( filter_activity=\"loading_start\", filter_time_min=datetime(2019, 8, 1), filter_time_max=datetime(2019, 8, 1), ) print(\"Cargo movements successfully loaded\") # Convert search result to dataframe df = search_result.to_df() print(df.head())","title":"0 Simple Load Cargo Movements"},{"location":"examples/1_china/","text":"Let's retrieve all the VLCCs that have discharged into China in the last 3 months. The below script returns: events.cargo_port_unload_event.0.start_timestamp product.group.label product.grade.label quantity vessels.0.name 0 2019-10-08T00:41:00+0000 Crude Djeno 123457 AROME 1 2019-11-08T00:41:52+0000 Crude Arab Medium 99898 SCOOBYDOO 2 2019-09-30T23:49:41+0000 Crude Arab Heavy 9879878 DAVID 3 2019-12-01T01:40:00+0000 Crude Usan 999999 DUCK from datetime import datetime from vortexasdk import CargoMovements, Geographies, Vessels if __name__ == \"__main__\": # Find china ID china = [ g.id for g in Geographies().search(term=\"china\").to_list() if \"country\" in g.layer ] # Find the ID of all VLCCs vlccs = [ v.id for v in Vessels().search(vessel_classes=\"vlcc_plus\").to_list() ] # Query API search_result = CargoMovements().search( filter_activity=\"loading_start\", filter_vessels=vlccs, filter_destinations=china, filter_time_min=datetime(2019, 8, 29), filter_time_max=datetime(2019, 10, 30), ) # Convert search result to dataframe df = search_result.to_df()","title":"1 China VLCC Discharges"},{"location":"examples/2_all_vessel_movements/","text":"Let's find some laden vessel movements The below script returns: vessel.name vessel.imo vessel.mmsi vessel.cubic_capacity vessel.dwt vessel.vessel_class origin.location.port.label origin.location.sts_zone.label origin.from_vessel.label origin.to_vessel.label destination.location.port.label destination.location.sts_zone.label destination.from_vessel.label destination.to_vessel.label origin.start_timestamp destination.end_timestamp cargoes.0.product.group.label cargoes.0.product.grade.label cargoes.0.product.grade.probability vessel.corporate_entities.charterer.label vessel.corporate_entities.time_charterer.label vessel.corporate_entities.commercial_owner.label 0 17 FEBRUARY 9.38089e+06 248896000 172092 160391 suezmax Ras Tanura [SA] nan nan nan Malacca (Melaka) [MY] nan nan nan 2017-09-29T18:30:01+0000 2017-10-16T04:06:03+0000 Crude Arab Light 0.299732 nan nan CORE PETROLEUM 3 A MELODY 9.24931e+06 636019335 169352 149995 suezmax Ras Tanura [SA] nan nan nan Rayong [TH] nan nan nan 2017-09-20T09:15:15+0000 2017-10-09T20:07:28+0000 Crude Arab Light 0.903729 THAI OIL nan LMCS Maritime 4 A STAR 9.00660e+06 511801000 333924 291381 vlcc_plus nan nan nan nan nan nan nan nan nan 2017-10-08T14:50:01+0000 Crude nan nan nan nan nan 5 A STAR 9.15982e+06 356206000 9716 11047 general_purpose Shahid Rajaee Port (Bandar Abbas) [IR] nan nan nan Haldia [IN] nan nan nan 2017-09-23T23:59:30+0000 2017-10-16T01:49:00+0000 Dirty products Bitumen 1 nan nan nan 10 ABDIAS NASCIMENTO 9.4539e+06 710032990 171000 157055 suezmax Marlim Sul Field [BR] nan nan nan Sao Francisco Do Sul, SC [BR] nan nan nan 2017-09-28T18:29:45+0000 2017-10-04T23:05:32+0000 Crude nan nan nan nan PETROBRAS 11 ABIOLA 8.61943e+06 657995000 47261 35644 handysize Port Harcourt [NG] nan nan nan nan nan nan nan 2014-12-02T10:20:03+0000 nan Clean products Full Range 0.490481 nan nan nan 13 ABLIANI 9.69307e+06 256903000 124518 109999 aframax Ceyhan [TR] nan nan nan Sarroch (Porto Foxi) [IT] nan nan nan 2017-09-26T21:33:43+0000 2017-10-03T15:45:15+0000 Crude Azeri Light 1 nan nan Eastern Mediterranean Maritime Ltd 19 AC-D 9.42844e+06 256934000 8628 7842 tiny_tanker Varna [BG] nan nan nan Valencia [ES] nan nan nan 2017-09-20T08:00:58+0000 2017-10-06T15:49:00+0000 Clean products Finished Biodiesel 0.868073 nan nan nan 20 ACACIA 9.4766e+06 371044000 14570 13566 general_purpose Bontang, KL [ID] nan nan nan Lianyungang [CN] nan nan nan 2017-09-28T13:13:57+0000 2017-10-07T00:30:46+0000 Clean products Chemicals 0.999186 nan nan KOKUKA SANGYO 22 ACACIA RUBRA 9.46853e+06 249374000 6000 6065 tiny_tanker Mosjoen [NO] nan nan nan Sigerfjord [NO] nan nan nan 2017-10-01T00:01:53+0000 2017-10-06T10:53:20+0000 Dirty products nan nan nan nan nan from datetime import datetime from vortexasdk import VesselMovements if __name__ == \"__main__\": # Query the API search_result = VesselMovements().search( filter_time_min=datetime(2017, 10, 1, 0), filter_time_max=datetime(2017, 10, 1, 1), ) # A complete list of available columns can be found at https://vortechsa.github.io/python-sdk/endpoints/vessel_movements/#notes # We only require a subset of available columns here required_columns = [ # Show metadata about the vessel \"vessel.name\", \"vessel.imo\", \"vessel.mmsi\", \"vessel.cubic_capacity\", \"vessel.dwt\", \"vessel.vessel_class\", # Show any corporate information associated with the vessel \"vessel.corporate_entities.charterer.label\", \"vessel.corporate_entities.time_charterer.label\", \"vessel.corporate_entities.commercial_owner.label\", # Show the port, sts_zone, or vessel at the start of the vessel movement \"origin.location.port.label\", \"origin.location.sts_zone.label\", \"origin.from_vessel.label\", \"origin.to_vessel.label\", # Show the port, sts_zone, or vessel at the end of the vessel movement \"destination.location.port.label\", \"destination.location.sts_zone.label\", \"destination.from_vessel.label\", \"destination.to_vessel.label\", # The start and end timestamps of the movement \"origin.start_timestamp\", \"destination.end_timestamp\", # The cargo (if any), onboard the vessel during the vessel movement. # If the vessel was balast, then the cargo will be empty. \"cargoes.0.product.group.label\", \"cargoes.0.product.grade.label\", \"cargoes.0.product.grade.probability\", ] # Convert the search result to a dataframe vessel_movements = search_result.to_df(columns=required_columns) # Laden vessel movements are movements with a cargo (unlike ballast movements, where the vessel isn't carrying any cargo). is_laden_mask = vessel_movements[\"cargoes.0.product.group.label\"].notna() # Let's find the laden vessel movements. laden_vessel_movements = vessel_movements[is_laden_mask]","title":"2 Laden Vessel Movements"},{"location":"examples/3_crude_from_saudi_arabia_to_india/","text":"Let's find all crude cargo movements from Saudi Arabia to India that loaded in the last month. The below script returns a pd.DataFrame , similar to the table given in the movements tab of https://analytics.vortexa.com , filtering on Products: Crude with Origin: Saudi Arabia , Destination: India and Date Range: Departures in the last Month . from datetime import datetime from dateutil.relativedelta import relativedelta from vortexasdk import CargoMovements, Geographies, Products if __name__ == \"__main__\": now = datetime.utcnow() one_month_ago = now - relativedelta(months=1) # First we find the ID for the country India. Note that when searching geographies with the term 'india', we'll # retreive all geographies with india in the name, ie Indiana, British Indian Ocean Territory... all_geogs_with_india_in_the_name = Geographies().search(\"india\").to_list() # We're only interested in the country India here india = [ g.id for g in all_geogs_with_india_in_the_name if g.name == \"India\" ] # Check we've only got one ID for India assert len(india) == 1 saudi_arabia = [ g.id for g in Geographies().search(\"saudi arabia\").to_list() if \"country\" in g.layer ] # Check we've only got one ID for Saudi Arabia assert len(saudi_arabia) == 1 # Let's find the Crude ID crude = [ p.id for p in Products().search(\"crude\").to_list() if p.name == \"Crude\" ] # Check we've only got one Crude ID assert len(crude) == 1 # Query the API. search_result = CargoMovements().search( filter_activity=\"loading_end\", filter_origins=saudi_arabia, filter_destinations=india, filter_products=crude, filter_time_min=one_month_ago, filter_time_max=now, ) # A complete list of available columns can be found at https://vortechsa.github.io/python-sdk/endpoints/cargo_movements/#notes # We only require a subset of available columns here required_columns = [ # A cargo movement can be carried by multiple vessels across various STS transfers. You can find all the vessels that # the cargo was onboard by inspecting the 'vessels.0', 'vessels.1' columns etc. # The 'vessels.0' columns shows the primary vessel associated with the cargo movement \"vessels.0.name\", \"vessels.0.vessel_class\", # Here we show any corporate information associated with the primary vessel \"vessels.0.corporate_entities.charterer.label\", \"vessels.0.corporate_entities.time_charterer.label\", \"vessels.0.corporate_entities.commercial_owner.label\", # Show the product information and quantity \"product.group.label\", \"product.grade.label\", \"quantity\", # Is the vessel in transit, has it already discharged, or is it in floating storage? \"status\", # Show the loading Port name, and the loading timestamp \"events.cargo_port_load_event.0.location.port.label\", \"events.cargo_port_load_event.0.end_timestamp\", # Show the discharge Port name, and the discharge timestamp \"events.cargo_port_unload_event.0.location.port.label\", \"events.cargo_port_unload_event.0.end_timestamp\", ] # Convert the search result to a dataframe df = search_result.to_df(columns=required_columns) # Sort the dataframe by loading timestamp df = df.sort_values(by=[\"events.cargo_port_load_event.0.end_timestamp\"])","title":"3 Crude movements from Saudi Arabia to India"},{"location":"examples/4_ballast_movements/","text":"Let's find some ballast movements from datetime import datetime from vortexasdk import VesselMovements if __name__ == \"__main__\": # Query the API search_result = VesselMovements().search( filter_time_min=datetime(2017, 10, 1, 0), filter_time_max=datetime(2017, 10, 1, 1), filter_vessel_status=\"vessel_status_ballast\", ) # Convert the search result to a dataframe ballast_movements = search_result.to_df()","title":"4 Ballast Movements"},{"location":"examples/5_chinese_daily_imports/","text":"Let's retrieve the daily sum of Chinese Crude/Condensate imports, over the last year. The below script returns: key value count 0 2019-01-01T00:00:00.000Z 1237381 9 1 2019-01-02T00:00:00.000Z 6548127 23 2 2019-01-03T00:00:00.000Z 45457617 23 3 2019-01-04T00:00:00.000Z 6467759 43 4 2019-01-05T00:00:00.000Z 7777144 4 ... from datetime import datetime from vortexasdk import CargoTimeSeries, Geographies, Products if __name__ == \"__main__\": # Find china ID china = [ g.id for g in Geographies().search(term=\"china\").to_list() if \"country\" in g.layer ] # Find Crude/Condensates ID crude_condensates = [ p.id for p in Products().search(term=\"Crude/Condensates\").to_list() if p.name == \"Crude/Condensates\" ] # Query API search_result = CargoTimeSeries().search( # We're only interested in movements into China filter_destinations=china, # We're looking at daily imports timeseries_frequency=\"day\", # We want 'b' for barrels here timeseries_unit=\"b\", # We're only interested in Crude/Condensates filter_products=crude_condensates, # We want all cargo movements that unloaded in 2019 to be included filter_activity=\"unloading_start\", filter_time_min=datetime(2019, 1, 1), filter_time_max=datetime(2019, 12, 31), ) # Convert search result to dataframe df = search_result.to_df()","title":"5 Chinese Daily Crude Imports"},{"location":"examples/6_medium_sour_floating_storage/","text":"Let's see how much Medium-Sour Crude is in long term floating storage. The below script returns: key value count 0 2019-01-01T00:00:00.000Z 7381 9 1 2019-01-02T00:00:00.000Z 8127 23 2 2019-01-03T00:00:00.000Z 2333 32 3 2019-01-04T00:00:00.000Z 447759 43 4 2019-01-05T00:00:00.000Z 7777144 4 ... from datetime import datetime from docs.utils import to_markdown from vortexasdk import CargoTimeSeries, Products if __name__ == \"__main__\": # Find Medium Sour ID medium_sour = [ p.id for p in Products().search(term=\"Medium-Sour\").to_list() if p.name == \"Medium-Sour\" ] # Check we've only got one ID assert len(medium_sour) == 1 # Query API search_result = CargoTimeSeries().search( # We're looking at daily storage levels timeseries_frequency=\"day\", # We want 'b' for barrels here timeseries_unit=\"b\", # We're only interested in storage of Medium-Sour Crude filter_products=medium_sour, # We're only included in cargo's that were in floating storage filter_activity=\"storing_state\", # We're only interested in floating storage that lasted longer than 14 days timeseries_activity_time_span_min=1000 * 60 * 60 * 24 * 14, # Let's limit the search to 2019 storage events filter_time_min=datetime(2019, 1, 1), filter_time_max=datetime(2019, 12, 31), ) # Convert search result to dataframe df = search_result.to_df() print(to_markdown(df.head()))","title":"6 Floating Storage Medium Sour Crude"}]}